8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   20:10:39  01/07/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE KEYPAD
OBJECT MODULE PLACED IN KEYPAD.OBJ
ASSEMBLER INVOKED BY:  C:\5XTOOLS\ASM86.EXE KEYPAD.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1     NAME    KEYPAD
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    KEYPAD                                  ;
                             6     ;                          RoboTrike Keypad Functions                        ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; Description:       This program includes the routines for the RoboTrike
                            12     ;                    keypad. The public functions included are:
                            13     ;                        InitKeypad        -  initializes the RoboTrike Keypad
                            14     ;                                             by clearing out whatever was
                            15     ;                                             previously displayed on the board
                            16     ;                        Keyscan            - 
                            17     ;
                            18     ; Revision History:
                            19     ;     11/03/15  Nancy Cao         initial comments and pseudocode
                            20     ;     11/08/15  Nancy Cao         added code and comment
                            21     ;     11/10/15  Nancy Cao         added masking to the higher bit of key pressed
                            22     ;     11/11/15  Nancy Cao         fixed row incrementing issues
                            23     
                            24     ; local include files
                            25 +1  $INCLUDE(KEYPAD.INC)        ; display constants ASCII / mux buffer definition
                      =1    26     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    27     ;                                                                            ;
                      =1    28     ;                                  KEYPAD.INC                                ;
                      =1    29     ;                              KEYPAD Definitions                            ;
                      =1    30     ;                                 Include File                               ;
                      =1    31     ;                                                                            ;
                      =1    32     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    33     
                      =1    34     ; This file contains the definitions for the keypad functions.
                      =1    35     ;
                      =1    36     
                      =1    37     ; Addresses
                      =1    38     
  0080                =1    39     KEY_ROW_ONE            EQU 80H  ; address of the 1st row of the keypad
                      =1    40     
                      =1    41     ; General definitions
                      =1    42     
  0064                =1    43     DEBOUNCE_COUNTER_START EQU 100      ; # times key debounces to be pressed
  000F                =1    44     DEFAULT_ROW_VALUE      EQU 0fH      ; the default value when no keys are pressed
  000F                =1    45     KEY_PRESS_MASK         EQU 0fH      ; used to mask out the higher bit of key pad byte
                                    input
  0001                =1    46     KEY_EVENT              EQU 1H       ; the key event to pass to the EnqueueEvent
  0004                =1    47     KEYS_PER_ROW           EQU 4        ; the number of keys per key rows
  0002                =1    48     KEYS_PER_ROW_BIT       EQU 2        ; the number of keys per row bit
  0004                =1    49     NUM_ROWS               EQU 4        ; the number of rows on the keypad
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   20:10:39  01/07/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

  01F4                =1    50     REPEAT_RATE            EQU 500      ; the auto repeat constant (2 Hz)
  0000                =1    51     STARTING_ROW_INDEX     EQU 0        ; the starting row index of the row
                            52     
                            53     EXTRN EnqueueEvent:NEAR          ; used to initialize chip select
                            54     
                            55     CGROUP  GROUP   CODE
                            56     DGROUP  GROUP   DATA
                            57     
                            58     
----                        59     CODE    SEGMENT PUBLIC 'CODE'
                            60     
                            61     
                            62             ASSUME  CS:CGROUP, DS:DGROUP
                            63     
                            64     
                            65     ; InitKeypad
                            66     ; 
                            67     ; Description: This function initializes the 16-key keypad by resetting
                            68     ;              the counter that keeps track of debounced keys to
                            69     ;              DEBOUNCE_COUNTER_START and the index of the current row to
                            70     ;              examine for pressed keys to be 0, the beginning.
                            71     ;
                            72     ; Operation:   The function resets the counter to DEBOUCNE_COUNTER_START, and
                            73     ;              sets the current row index to be 0 for the 16-key keypad.
                            74     ;
                            75     ; Arguments:        None.
                            76     ; Return Value:     None.
                            77     ; Local Variables:  None.
                            78     ; Shared Variables: debouncedCounter - keeps track of how long a key has been
                            79     ;                                      pressed down
                            80     ; Global Variables: None.
                            81     ;
                            82     ; Input:  None.
                            83     ; Output: None.
                            84     ;
                            85     ; Error Handling: None.
                            86     ;
                            87     ; Limitations: There are only 16 keys, 4 keys for each of the 4 rows.
                            88     ;
                            89     ; Algorithms: None.
                            90     ; Data Structures: None.
                            91     ;
                            92     ; Registers Changed: None.
                            93     ;
                            94     ; Author: Nancy Cao
                            95     ; Revision History:
                            96     ;     11/07/15  Nancy Cao        initial comments and pseudocode
                            97     ;     11/08/15  Nancy Cao        added code and updated comments
                            98     
0000                        99     InitKeypad   PROC        NEAR
                           100                  PUBLIC      InitKeypad
                           101     
0000 53                    102         PUSH BX
                           103                  
0001                       104     InitializeCounters:                           ; initialize counters
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   20:10:39  01/07/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

0001 83FB04                105         CMP BX, KEYS_PER_ROW                      ; see if we finished last key
0004 7407                  106         JZ  FinishInitializeCounters              ; if yes all row counters done
                           107         
0006 C78700006400   R      108         MOV debounceCounter[BX], DEBOUNCE_COUNTER_START ; otherwise keep setting
                           109                                                         ; debounceCounter to
                           110                                                         ; DEBOUNCE_COUNTER_START
000C 43                    111         INC BX                                          ; go to the next element
                           112                                                         ; in debounceCounter
                           113         
000D                       114     FinishInitializeCounters:                           ; everything initialized
000D C60602000090   R      115         MOV currentRow, STARTING_ROW_INDEX             ; set the row index to
                           116                                                         ; STARTING_ROW_INDEX
0013 5B                    117         POP BX                                          ; return value to register
0014 C3                    118         RET
                           119     
                           120     
                           121     InitKeypad       ENDP
                           122     
                           123     
                           124     ; Keyscan
                           125     ; 
                           126     ; Description: This function either checks for a new key(s) being pressed on the 
                           127     ;              current row if none is currently pressed or debounces the
                           128     ;              currently pressed key(s). If it debounces a key it calls the
                           129     ;              EnqueueEvent function, which will store the key events and key
                           130     ;              values into a buffer called EventBuf.
                           131     ;
                           132     ; Operation:   This function retreives the address of the current row to
                           133     ;              examine, and retreives the value of the current row. If the
                           134     ;              value of the current row equals the DEFAULT_ROW_VALUE, then none
                           135     ;              of the values in that row are being pressed, and the function can
                           136     ;              just move onto the next row and finish. If the current row does
                           137     ;              not equal DEFAULT_ROW_VALUE, then at least one key is being
                           138     ;              pressed in the current row. If this is the case, the debounced
                           139     ;              counter is decremented. If the counter does not reach 0, then the
                           140     ;              key(s) in the row have not been pressed long enough, so the
                           141     ;              the function just returns without moving on (since the function
                           142     ;              needs to reexamine the same row over and over again until
                           143     ;              debouncing happens on the keys). If the counter does reach 0,
                           144     ;              then the key(s) in the row have been debounced. In this case, the
                           145     ;              function goes through every key in the row, and decides if the
                           146     ;              lowest bit key is pressed or not pressed before moving onto the
                           147     ;              next lowest bit. If the key is pressed, the key event and the key
                           148     ;              value (which is the number of the key) is passed into the
                           149     ;              EnqueueEvent function, which stores these two values next to each
                           150     ;              other into a buffer called EventBuf. Afterwards, debouncing is
                           151     ;              done, the keys are successfully registered as presses, and
                           152     ;              the function increments to the next row to examine if any keys
                           153     ;              are being pressed there.
                           154     ;
                           155     ; Arguments:        None.
                           156     ; Return Value:     None.
                           157     ; Local Variables:  key_event (AH)  - the key event of the key being pressed
                           158     ;                   key_value (AL)  - the key value of the key being pressed
                           159     ; Shared Variables: debouncedBuffer - keeps track of which keys are being
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   20:10:39  01/07/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           160     ;                                     pressed and debounced.
                           161     ;                   EventBuf        - stores key events and key values
                           162     ; Global Variables: None.
                           163     ;
                           164     ; Input: None.
                           165     ; Output: None.
                           166     ;
                           167     ; Error Handling: None.
                           168     ;
                           169     ; Limitations: None.
                           170     ;
                           171     ; Algorithms: None.
                           172     ; Data Structures: Arrays (EventBuf)
                           173     ;
                           174     ; Registers Changed: AX
                           175     ;
                           176     ; Author: Nancy Cao
                           177     ; Revision History:
                           178     ;     11/03/15  Nancy Cao        initial comments and pseudocode
                           179     ;     11/08/15  Nancy Cao        added code and updated comments
                           180     ;     11/10/15  Nancy Cao        cleared out higher bit of key press byte
                           181     ;     11/11/15  Nancy Cao        fixed row incrementing issues
                           182     
0015                       183     Keyscan      PROC        NEAR
                           184                  PUBLIC      Keyscan
                           185     
0015 50                    186         PUSH AX
0016 52                    187         PUSH DX
                           188         
0017                       189     CheckKeyValue:
0017 B600                  190         MOV  DH, 0                            ; clear higher bit of DX for accurate
                           191                                               ; address
0019 8A160200       R      192         MOV  DL, currentRow                   ; set index of the current row to
                           193                                               ; lower bit of DX for the IN instruct.
001D 80C280                194         ADD  DL, KEY_ROW_ONE                  ; find the appropriate address for row
0020 EC                    195         IN   AL, DX                           ; check the keys on current row
0021 240F                  196         AND  AL, KEY_PRESS_MASK               ; clear higher bit of key press byte
0023 3C0F                  197         CMP  AL, DEFAULT_ROW_VALUE            ; check if keys are being pressed
0025 7433                  198         JE   FinishedRow                      ; if not there is no debouncing
0027 7500                  199         JNE  KeysPressed                      ; if yes debounce on the keys
                           200     
0029                       201     KeysPressed:
0029 FF0E0000       R      202         DEC  debounceCounter                  ; decrement the debounce counter
002D 7402                  203         JZ   StartKeyDebounced                ; if counter now 0, debouncing has
                           204                                               ; happened. must find the keys that
                           205                                               ; are pressed, set event/values and
                           206                                               ; call EnqueueEvent
002F 7542                  207         JNZ  Finished                         ; otherwise we are done
                           208     
0031                       209     StartKeyDebounced:
0031 B100                  210         MOV  CL, 0                            ; start looking at first key in row
0033 F6D0                  211         NOT  AL                               ; flip all the bits to test each bit
0035 EB0190                212         JMP  KeyDebounced                     ; check which keys to enqueue
                           213         
0038                       214     KeyDebounced:
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   20:10:39  01/07/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

0038 80F904                215         CMP  CL, KEYS_PER_ROW                 ; check if all keys on row are looked
003B 7430                  216         JE   FinishedDebounce                 ; if yes done finding pressed keys
                           217         
003D A801                  218         TEST AL, 1                            ; otherwise check lowest bit to
                           219                                               ; see if lowest key pressed
003F 7506                  220         JNZ   EnqueueKey                      ; if key pressed (lowest bit matches 1) add
                                    to the EventBuf
                           221         
0041 D0E8                  222         SHR  AL, 1                            ; next lowest bit for next key
0043 FEC1                  223         INC  CL                               ; increment key index
0045 EBF1                  224         JMP  KeyDebounced                     ; look at next key in row
                           225     
0047                       226     EnqueueKey:
                           227         
0047 B401                  228         MOV  AH, KEY_EVENT                    ; pass key event to EnqueueEvent
0049 8A160200       R      229         MOV  DL, currentRow                   ; set index of current row to DL for
                           230                                               ; multiplication
004D C0E202                231         SHL  DL, KEYS_PER_ROW_BIT             ; multiply current row by KEYS_PER_ROW
0050 02D1                  232         ADD  DL, CL                           ; and add current keys examined figure
                           233                                               ; out the key value pressed
0052 8AC2                  234         MOV  AL, DL                           ; pass key value to Enqueue Event
                           235         
0054 E80000         E      236         CALL EnqueueEvent                     ; store key event/value into EventBuf
                           237         
0057 EB1490                238         JMP FinishedDebounce
                           239      
005A                       240     FinishedRow:
005A FE060200       R      241         INC  currentRow                       ; time to read the next row of keys
005E 802602000390   R      242         AND  currentRow, NUM_ROWS - 1         ; wrap the index for out of bounds
0064 C70600006400   R      243         MOV  debounceCounter, DEBOUNCE_COUNTER_START ; reset counter for next row
006A EB0790                244         JMP  Finished
                           245         
006D                       246     FinishedDebounce:
006D C7060000F401   R      247         MOV  debounceCounter, REPEAT_RATE     ; set the repeat rate of key
                           248                                               ; to be REPEAT_RATE
                           249         ;JMP Finished
                           250     
0073                       251     Finished:    
0073 5A                    252         POP DX
0074 58                    253         POP AX
                           254         
0075 C3                    255         RET
                           256     
                           257     Keyscan       ENDP
                           258     
----                       259     CODE ENDS
                           260     
                           261     ;the data segment
                           262     
----                       263     DATA    SEGMENT PUBLIC  'DATA'
                           264     
0000 ????                  265     debounceCounter   DW     ?               ; # times key debounces to be pressed
0002 ??                    266     currentRow        DB     ?               ; the current row to read keys from
                           267     
                           268     
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   20:10:39  01/07/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

----                       269     DATA    ENDS
                           270     
                           271     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
