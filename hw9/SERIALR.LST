8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE SERIALR
OBJECT MODULE PLACED IN SERIALR.OBJ
ASSEMBLER INVOKED BY:  C:\5XTOOLS\ASM86.EXE SERIALR.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1     NAME    SERIALR
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                   SERIALR                                  ;
                             6     ;                     RoboTrike Serial Routine Functions                     ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; Description:       This program includes the RoboTrike serial routine
                            12     ;                    functions. The public functions included are:
                            13     ;                        InitSerial         - initializes the serial (public)
                            14     ;                        SerialPutChar      - loads a char into the serial
                            15     ;                                             queue (public)
                            16     ;                        SetBaudRate        - sets the baud rate (public)
                            17     ;                        SetParity          - sets the parity(public)
                            18     ;                        SerialEventHandler - uses interrupt 2 to check any
                            19     ;                                             interrupts happening, the 4 being
                            20     ;                                             modem, transmitter, data received,
                            21     ;                                             and line status error.
                            22     ;                                             when to check for something in the
                            23     ;                                             queue. Also enqueues errors
                            24     ;                                             from reading the queue.
                            25     ;                        
                            26     ;
                            27     ; Revision History:
                            28     ;     11/17/15  Nancy Cao         initial comments and pseudocode
                            29     ;     11/22/15  Nancy Cao         initial code
                            30     ;     11/24/15  Nancy Cao         finished coding all functions
                            31     ;     11/28/15  Nancy Cao         fixed critical code issues
                            32     ;     11/30/15  Nancy Cao         updated comments
                            33     
                            34     ; local include files
                            35 +1  $INCLUDE(SERIALR.INC)     ; serial constants used for serial I/O Routines
                      =1    36     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    37     ;                                                                            ;
                      =1    38     ;                                  SERIALR.INC                               ;
                      =1    39     ;                         Serial I/O Routine Definitions                     ;
                      =1    40     ;                                 Include File                               ;
                      =1    41     ;                                                                            ;
                      =1    42     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    43     
                      =1    44     ; This file contains the definitions for the serial I/O routine functions.
                      =1    45     ;
                      =1    46     
                      =1    47     ; Addresses
                      =1    48     
  0100                =1    49     SERIAL_BAUD     EQU     100H       ; baud rate generator divisor (R/W)
  0100                =1    50     SERIAL_THR      EQU     100H       ; transmitter holding register (R/W)
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

  0100                =1    51     SERIAL_RBR      EQU     100H       ; receiver buffer register (R/W)
  0100                =1    52     SERIAL_DLL      EQU     100H
  0101                =1    53     SERIAL_DLM      EQU     101H
  0101                =1    54     SERIAL_IER      EQU     101H       ; interrupt enable register (R/W)
  0102                =1    55     SERIAL_IIR      EQU     102H       ; interrupt identification register (R/W)
  0103                =1    56     SERIAL_LCR      EQU     103H       ; line control register (R/W)
  0104                =1    57     SERIAL_MCR      EQU     104H       ;
  0105                =1    58     SERIAL_LSR      EQU     105H       ; line status register (R/W)
  0106                =1    59     SERIAL_MSR      EQU     106H       ; modem status register (R/W)
  FF22                =1    60     EOI             EQU     0FF22H     ; address of EOI
                      =1    61     
                      =1    62     
                      =1    63     ; Line Control Register
                      =1    64     
  0080                =1    65     ENABLE_BAUD_MASK   EQU     10000000B  ; enable access to the baud rate divisor
  007F                =1    66     DISABLE_BAUD_MASK  EQU     01111111B  ; mask to disable access to the baud rate divis
                                   or
  001C                =1    67     ENABLE_PARITY      EQU     00011100B  ; enable all parity bits
  0002                =1    68     ENABLE_ETBE_MASK   EQU     00000010B  ; enable access to the ETBE
  000D                =1    69     DISABLE_ETBE_MASK  EQU     00001101B  ; mask to disable access to the ETBE
  0003                =1    70     SERIAL_SETUP       EQU     00000011B  ; 0-------  access Rx/Tx data registers
                      =1    71                                           ; -0------  no break output
                      =1    72                                           ; --000---  no parity
                      =1    73                                           ; -----0--  one stop bit
                      =1    74                                           ; ------11  8 data bits
                      =1    75     
                      =1    76     ; Interrupt Enable/Disable Register
                      =1    77     
  0000                =1    78     SERIAL_DIS_IRQ  EQU     00000000B  ; disable all interrupts
  000F                =1    79     SERIAL_IN_IRQ   EQU     00001111B  ; enables the four interrupts:
                      =1    80                                        ; modem status (bit 3)
                      =1    81                                        ; receiver line status (bit 2),
                      =1    82                                        ; transmitter holding register empty (bit 1)
                      =1    83                                        ; receiver data ready/char timeout (bit 0)
                      =1    84                                        
                      =1    85     ; general definitions
                      =1    86     
  0002                =1    87     DEFAULT_BAUD    EQU     2         ; the index of the default baud divisor
  0000                =1    88     DEFAULT_PARITY  EQU     0         ; the index of the parity
  0007                =1    89     IIR_MASK        EQU     111B      ; mask out all the bits of IIR except bottom
                      =1    90                                       ; 3 bits
  001E                =1    91     ERROR_MASK      EQU     00011110B ; used to mask out the error in LSR
  000E                =1    92     EOI_VALUE       EQU     14        ; value of EOI to pass
  0002                =1    93     EVENT_RBR       EQU     2         ; RBR event occured
  0003                =1    94     EVENT_ERROR     EQU     3         ; error event occurd
                            95 +1  $INCLUDE(QUEUE.INC)       ; queue constants used for the queue
                      =1    96     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    97     ;                                                                            ;
                      =1    98     ;                                   QUEUE.INC                                ;
                      =1    99     ;                               Queue Definitions                            ;
                      =1   100     ;                                  Include File                              ;
                      =1   101     ;                                                                            ;
                      =1   102     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   103     
                      =1   104     ; This file contains the definitions for the queue functions.
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   105     ;
                      =1   106     ; Revision History:
                      =1   107     ;     10/24/15  Nancy Cao      initial revision
                      =1   108     
                      =1   109     ; definitions
  00FF                =1   110     LENGTH_TEST   EQU 255               ; length of the queue
                      =1   111     
                      =1   112     ; Queue structure
                      =1   113     
----                  =1   114     QUEUE         STRUC
0000                  =1   115         headPtr   DB ?                  ; index of head/first element of queue
0001                  =1   116             tailPtr   DB ?                  ; index of tail/last element of queue
0002                  =1   117             len       DW ?                  ; length of queue in bytes
0004                  =1   118             s         DB ?                  ; size of elements in queue (1 or 2 bytes)
0005                  =1   119             array1Ds  DB 256 DUP (?)        ; 1D array designed to hold max 256 bytes
----                  =1   120     QUEUE         ENDS
                           121     
                           122     EXTRN QueueInit:NEAR      ; used to initialize the queue, set the head and the
                           123                               ; tail at appropriate locations
                           124     EXTRN QueueEmpty:NEAR     ; used to check if the queue is empty
                           125     EXTRN QueueFull:NEAR      ; used to check if the queue is full
                           126     EXTRN Dequeue:NEAR        ; used to remove an element from the queue and return
                           127                               ; that element if the queue is not already empty
                           128     EXTRN Enqueue:NEAR        ; used to put an element into the queue if the queue
                           129                               ; is not already full
                           130     EXTRN EnqueueEvent:NEAR   ; enqueues an event and its value to the queue
                           131                               
                           132     EXTRN Baud_Table:WORD     ; baud rate dividers used to get baud rates
                           133     EXTRN Parity_Table:BYTE   ; parity settings for the serial
                           134     
                           135     CGROUP  GROUP   CODE
                           136     DGROUP  GROUP   DATA
                           137     
----                       138     CODE    SEGMENT PUBLIC 'CODE'
                           139     
                           140     
                           141             ASSUME  CS:CGROUP, DS:DGROUP
                           142     
                           143     ; InitSerial
                           144     ; 
                           145     ; Description: This function initializes the serial. The LCR and the IER are
                           146     ;              initialized to SERIAL_SETUP and SERIAL_IN_IRQ. The shared
                           147     ;              variables are also initialized, including the serial chip, the
                           148     ;              baud rate, the parity, and the serial counter used for the event
                           149     ;              handler.
                           150     ;
                           151     ; Operation:   This function first initializes the serial chip registers LCR and
                           152     ;              IER to SERIAL_SETUP (which sets it up the serial to access rx/tx
                           153     ;              data registers, have no break point, no parity, one stoP bit, and
                           154     ;              eight data bits) and SERIAL_IN_IRQ (which enables the four
                           155     ;              interrupts: modem, transmitter, receiver line status, and data
                           156     ;              ready), respectfully. The baud rate is set to be DEFAULT_BAUD,
                           157     ;              and the parity is set to be DEFAULT_PARITY. The kickstart flag is
                           158     ;              set to 0, since there are no interrupts.
                           159     ;
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           160     ; Arguments:        None.
                           161     ; Return Value:     None.
                           162     ; Local Variables:  None.
                           163     ; Shared Variables: baud - the baud rate of the serial (w)
                           164     ;                   parity - the parity of the serial (w)
                           165     ;                   kickstart - the flag that handles interrupts (w)
                           166     ; Global Variables: None.
                           167     ;
                           168     ; Input: None.
                           169     ; Output: None.
                           170     ;
                           171     ; Error Handling: None.
                           172     ;
                           173     ; Limitations: None.
                           174     ;
                           175     ; Algorithms: None.
                           176     ; Data Structures: None.
                           177     ;
                           178     ; Registers Changed: None.
                           179     ;
                           180     ; Author: Nancy Cao
                           181     ; Revision History:
                           182     ;     11/17/15  Nancy Cao        initial comments and pseudocode
                           183     ;     11/22/15  Nancy Cao        initial code and updated comments
                           184     ;     11/30/15  Nancy Cao        updated comments
                           185     ;
                           186     
0000                       187     InitSerial          PROC        NEAR
                           188                         PUBLIC      InitSerial
                           189     
0000                       190     Init82050:                          ; initialize the 82050 serial chip
0000 BA0301                191         MOV     DX, SERIAL_LCR          ; serial LCR address
0003 B003                  192         MOV     AL, SERIAL_SETUP        ; the value to put to LCR
0005 EE                    193         OUT     DX, AL                  ; write SERIAL_SETUP to SERIAL_LCR
                           194     
0006 BA0101                195         MOV     DX, SERIAL_IER          ; serial IER address
0009 B00F                  196         MOV     AL, SERIAL_IN_IRQ       ; the value to put into IER
000B EE                    197         OUT     DX, AL                  ; writes SERIAL_IN_IRQ to SERIAL_IER
                           198                                         ; which turns on the 4 interrupts
                           199             ;JMP    SetSerial               ; set the rest of the serial
                           200     
000C                       201     SetSerial:                          ; set serial parameters
000C BB0200                202         MOV     BX, DEFAULT_BAUD        ; the index of the default Baud rate divisor
000F D1E3                  203         SHL     BX, 1                   ; must shift left since reading word table
0011 E84800                204         CALL    SetBaudRate             ; set the baud rate divisor
0014 BB0000                205         MOV     BX, DEFAULT_PARITY      ; the index of the default parity
0017 E86900                206         CALL    SetParity               ; set the parity of the serial
                           207         ;JMP    InitQueue               ; initialize the queue
                           208     
001A                       209     InitQueue:
001A BE000090       R      210         MOV     SI, OFFSET(tx)      ; pass in address of the transfer queue at DS:SI
001E B9FF00                211         MOV     CX, LENGTH_TEST     ; pass in length of queue
0021 E80000         E      212         CALL    QueueInit           ; initialize an empty queue with head/tails
                           213         ;JMP    InitKickstart       ; initialize kickstart flag
                           214     
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

0024                       215     InitKickstart:
0024 C60605010090   R      216         MOV kickstart, 0            ; no kickstart since no interrupts
                           217         ;JMP    EndInitSerial       ; finish initializing the serial
                           218     
002A                       219     EndInitSerial:
002A C3                    220         RET
                           221     
                           222     InitSerial    ENDP
                           223     
                           224     ; SerialPutChar
                           225     ;
                           226     ; Description:       This function takes in an eventValue, which is either a
                           227     ;                    character or an error code. The character/error code is
                           228     ;                    enqueued. If the character/error code is successfully
                           229     ;                    enqueued, the carry flag is reset; otherwise it is set,
                           230     ;                    meaning the queue was full. If a character in enqueued,
                           231     ;                    the function checks the kickstart and determines if ETBE
                           232     ;                    should be disabled and then enabled again.
                           233     ;
                           234     ; Operation:         The function first checks if the queue is full. If it is,
                           235     ;                    the carry flag is set, and no character is enqueued, since
                           236     ;                    there is no space. Otherwise, the function will enqueue the
                           237     ;                    character and check kickstart. If the kickstart is set,
                           238     ;                    the ETBE is disabled and then enabled again before the
                           239     ;                    kickstart is unset and the flag is unset.
                           240     ;
                           241     ; Arguments:         eventValue (AL) - either a character received or error code
                           242     ; Return Value:      None.
                           243     ;
                           244     ; Local Variables:   None.
                           245     ; Shared Variables:  None.
                           246     ; Global Variables:  None.
                           247     ;
                           248     ; Input:             None.
                           249     ; Output:            None.
                           250     ;
                           251     ; Error Handling:    None.
                           252     ;
                           253     ; Algorithms:        None.
                           254     ; Data Structures:   Queue.
                           255     ;
                           256     ; Registers Changed: Carry flag, AX, DX, SI
                           257     ;
                           258     ; Author:            Nancy Cao
                           259     ; Revision History:
                           260     ;     11/17/15  Nancy Cao   initial comments and pseudocode
                           261     ;     11/24/15  Nancy Cao   initial code
                           262     ;     11/30/15  Nancy Cao   updated comments
                           263     
002B                       264     SerialPutChar    PROC        NEAR
                           265                      PUBLIC      SerialPutChar
                           266     
002B                       267     CheckQueueFull:
002B BE000090       R      268         MOV SI, OFFSET(tx)    ; pass in address of the transfer queue at DS:SI
002F E80000         E      269         CALL QueueFull        ; check if the queue is full before we try to enqueue
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           270                               ; a char into the queue
0032 7421                  271         JZ SetCarryFlag           ; the zero flag is set which means the queue is full,
                           272                               ; so set the carry flag indicating that a char was
                           273                                                       ; not put into the queue
                           274         ;JMP EnqueueChar       ; otherwise attempt to enqueue the char
                           275     
0034                       276     EnqueueChar:
0034 E80000         E      277             CALL Enqueue          ; enqueue the char
                           278             ;JMP CheckKickstart   ; check if we should kickstart
                           279             
0037                       280     CheckKickstart:
0037 803E050101     R      281             CMP kickstart, 1      ; check if kickstart flag is set
003C 7403                  282         JZ  DisableETBE       ; if so, disable ETBE
003E EB1990                283         JMP FinishPutChar     ; otherwise we are done
                           284     
0041                       285     DisableETBE:
0041 BA0101                286         MOV DX, SERIAL_IER        ; address of SERIAL_IER
0044 EC                    287             IN  AL, DX                ; read in the value stored in IER to disable
0045 240D                  288         AND AL, DISABLE_ETBE_MASK ; clear the ETBE bit in the value
0047 EE                    289         OUT DX, AL                ; put the value back into IER to disable
                           290         ;JMP EnableETBE           ; enable the ETBE again
                           291      
0048                       292     EnableETBE:
0048 C60605010090   R      293         MOV kickstart, 0          ; reset kickstart
004E EC                    294         IN AL, DX                 ; read in the value from IER
004F 0C02                  295         OR AL, ENABLE_ETBE_MASK   ; set the ETBE bit in the value
0051 EE                    296         OUT DX, AL                ; put value back into IER to enable
0052 EB0590                297         JMP FinishPutChar         ; finished with kickstarting
                           298                                     
0055                       299     SetCarryFlag:
0055 F9                    300         STC                   ; set the carry flag to indicate char was not put
0056 EB0290                301             JMP Finish
                           302     
0059                       303     FinishPutChar:
0059 F8                    304         CLC                   ; unset the carry flag to indicate that a char was
                           305                                   ; put into the queue
                           306         ;JMP Finish
                           307                               
005A                       308     Finish:
005A FB                    309         STI                   ; end of critical code; enable interrupts again
005B C3                    310             RET
                           311             
                           312     SerialPutChar           ENDP
                           313     
                           314     ; SetBaudRate
                           315     ;
                           316     ; Description:       This function sets the baud rate parameter to its
                           317     ;                    appropriate value.
                           318     ;
                           319     ; Operation:         The function first disables the interrupts to handle the
                           320     ;                    critical code. It changes the value in LCR to set the baud
                           321     ;                    bit. It also sets the DLM and the DLL by shifting the high
                           322     ;                    bit to low bit. It then looks up the baud table to
                           323     ;                    determine the baud rate divisor. Afterwards, the DLAB is
                           324     ;                    then reset and the baud is disabled.
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           325     ;
                           326     ; Arguments:         None.
                           327     ; Return Value:      None.
                           328     ;
                           329     ; Local Variables:   None.
                           330     ; Shared Variables:  baud - the baud of the serial (w)
                           331     ; Global Variables:  None.
                           332     ;
                           333     ; Input:             None.
                           334     ; Output:            None.
                           335     ;
                           336     ; Error Handling:    None.
                           337     ;
                           338     ; Algorithms:        None.
                           339     ; Data Structures:   None.
                           340     ;
                           341     ; Registers Changed: flags, AX, DX
                           342     ;
                           343     ; Author:            Nancy Cao
                           344     ; Revision History:
                           345     ;     11/17/15  Nancy Cao   initial comments and pseudocode
                           346     ;     11/24/16  Nancy Cao   initial code
                           347     ;     11/30/15  Nancy Cao   updated comments
                           348     
005C                       349     SetBaudRate      PROC        NEAR
                           350                      PUBLIC      SetBaudRate
                           351        
005C 9C                    352         PUSHF                 ; save flags
005D FA                    353         CLI                   ; disable interrupts because critical code
                           354         
005E                       355     SetDLAB:      
005E BA0301                356         MOV     DX, SERIAL_LCR          ; get the LCR address to talk to it
0061 EC                    357         IN      AL, DX                  ; read in the value from LCR
0062 0C80                  358         OR      AL, ENABLE_BAUD_MASK    ; change baud bit to be set
0064 EE                    359         OUT     DX, AL                  ; sets DLAB
                           360         ;JMP    WriteBaudDivisor
                           361         
0065                       362     SetDLM:
0065 50                    363         PUSH AX
0066 8AC4                  364         MOV AL, AH                      ; move the high bit to the low bit
0068 BA0101                365         MOV DX, SERIAL_DLM              ; get the address of DLM
006B EE                    366         OUT DX, AL                      ; write in the new value
006C 58                    367         POP AX
                           368         
006D                       369     SetDLL:
006D BA0001                370         MOV DX, SERIAL_DLL              ; get the address of DLL
0070 EE                    371         OUT DX, AL                      ; write in the new value
                           372         
0071                       373     WriteBaudDivisor:
0071 BA0001                374         MOV     DX, SERIAL_BAUD         ; set the baud rate divisor
0074 2E8B870000     E      375         MOV     AX, CS:Baud_Table[BX]   ; get baud rate divisor
0079 EF                    376         OUT     DX, AX                  ; write out baud rate divisor
                           377         ;JMP    ResetDLAB  
                           378     
007A                       379     ResetDLAB:
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

007A BA0301                380         MOV     DX, SERIAL_LCR          ; talk to the baud rate divisor registers
007D EC                    381         IN      AL, DX                  ; read in the value from LCR
007E 247F                  382         AND     AL, DISABLE_BAUD_MASK   ; clear the ETBE bit in the value
0080 EE                    383         OUT     DX, AL                  ; reset DLAB
                           384         ;JMP    FinishedSetBaud
                           385     
0081                       386     FinishSetBaud:
                           387         ;STI                   ; end of critical code; enable interrupts again
0081 9D                    388         POPF                   ; retreive flags
0082 C3                    389         RET
                           390     
                           391     SetBaudRate           ENDP
                           392     
                           393     ; SetParity
                           394     ;
                           395     ; Description:       This function sets the parity parameter to its appropriate
                           396     ;                    value.
                           397     ;
                           398     ; Operation:         This function reads the current setup in the LCR and resets
                           399     ;                    it, then looks up the specified parity in the parity table
                           400     ;                    before setting it in the LCR value. The new value is then
                           401     ;                    put back in the LCR.
                           402     ;
                           403     ; Arguments:         index (BX) - the index of the parity from the parity table
                           404     ; Return Value:      None.
                           405     ;
                           406     ; Local Variables:   None.
                           407     ; Shared Variables:  parity - the parity of the serial (w)
                           408     ; Global Variables:  None.
                           409     ;
                           410     ; Input:             None.
                           411     ; Output:            None.
                           412     ;
                           413     ; Error Handling:    None.
                           414     ;
                           415     ; Algorithms:        None.
                           416     ; Data Structures:   None.
                           417     ;
                           418     ; Registers Changed: flags, AX, DX
                           419     ;
                           420     ; Author:            Nancy Cao
                           421     ; Revision History:
                           422     ;     11/17/15  Nancy Cao   initial comments and pseudocode
                           423     ;     11/24/15  Nancy Cao   initial code
                           424     ;     11/30/15  Nancy Cao   updated comments
                           425     
0083                       426     SetParity        PROC        NEAR
                           427                      PUBLIC      SetParity
                           428     
0083                       429     ClearParityBits:
0083 BA0301                430         MOV     DX, SERIAL_LCR          ; get the LCR address to talk to it
0086 2E8A870000     E      431         MOV     AL, CS:Parity_Table[BX] ; get the new parity
008B 0C03                  432         OR      AL, SERIAL_SETUP        ; set up serial
008D EE                    433         OUT     DX, AL                  ; set the parity in LCR
                           434         ;JMP    FinishParity
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           435     
008E                       436     FinishParity:
008E C3                    437         RET
                           438                      
                           439     SetParity    ENDP                 
                           440                      
                           441     ; SerialInterruptHandler
                           442     ;
                           443     ; Description:       This function handles the 4 interrupts: modem, transmitter,
                           444     ;                    data ready, and receiver line status. The interrupts are
                           445     ;                    handled via a jump table with level triggering. After the
                           446     ;                    interrupt is handled, an EOI value is sent to the EOI
                           447     ;                    address.
                           448     ;
                           449     ; Operation:         The function first reads the value stored in the IIR.
                           450     ;                    If any interrupt bits are set, the function looks at the
                           451     ;                    appropriate handler function for the specific interrupt via
                           452     ;                    the jump table. Afterwards, an EOI vaue is sent to the EOI.
                           453     ;
                           454     ; Arguments:         None.
                           455     ; Return Value:      None.
                           456     ;
                           457     ; Local Variables:   None.
                           458     ; Shared Variables:  None.
                           459     ; Global Variables:  None.
                           460     ;
                           461     ; Input:             None.
                           462     ; Output:            None.
                           463     ;
                           464     ; Error Handling:    None.
                           465     ;
                           466     ; Algorithms:        None.
                           467     ; Data Structures:   None.
                           468     ;
                           469     ; Registers Changed: AX, DB, DX
                           470     ;
                           471     ; Author:            Nancy Cao
                           472     ; Revision History:
                           473     ;     11/17/15  Nancy Cao   initial comments and pseudocode
                           474     ;     11/24/15  Nancy Cao   initial code
                           475     ;     11/30/15  Nancy Cao   updated comments
                           476     
008F                       477     SerialInterruptHandler   PROC        NEAR
                           478                              PUBLIC      SerialInterruptHandler
                           479     
008F 60                    480         PUSHA                           ; save all registers and flags
                           481         
0090 BA0201                482         MOV     DX, SERIAL_IIR          ; get the IIR address to see interrupt
0093 EC                    483         IN      AL, DX                  ; read in the value in IIR
0094 2407                  484         AND     AL, IIR_MASK            ; check the bits to see interrupt occurred
0096 3C01                  485         CMP     AL, 1                   ; check if an interrupt occurred
0098 7410                  486         JZ      FinishHandling          ; if no interrupt occurred end
                           487         ;JMP    ContinueHandling        ; otherwise continue
                           488         
009A                       489     ContinueHandling:
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

009A 8AD8                  490         MOV     BL, AL                  ; make IIR an index for the jump table
009C B700                  491         MOV     BH, 0                   ; clear the higher bit of BX for accurate
                           492                                         ; index
009E 2EFF97E300     R      493         CALL    CS:Jump_Table[BX]       ; calls function to clear specific interrupt
                           494         
00A3 BA22FF                495         MOV     DX, EOI                 ; address of EOI
00A6 B80E00                496         MOV     AX, EOI_VALUE           ; the value that should be in EOI
00A9 EE                    497         OUT     DX, AL                  ; move EOI value to appropriate address
                           498         ;JMP    FinishHandling
                           499         
00AA                       500     FinishHandling:
00AA 61                    501         POPA                            ; pop all registers and flags
                           502         
00AB CF                    503         IRET
                           504                                         
                           505     SerialInterruptHandler    ENDP           
                           506     
                           507     ; look at page 18 for info
                           508     ; read it in to move to the nxt
                           509     
                           510     ; ModemStatus
                           511     ;
                           512     ; Description:       This function handles the modem status interrupt by
                           513     ;                    looking up the status of the modem control
                           514     ;                    register and getting the current status. This must be
                           515     ;                    read to move on to the other interrupts.
                           516     ;
                           517     ; Operation:         The function simply reads in the status of the modem stored
                           518     ;                    in MSR.
                           519     ;
                           520     ; Arguments:         None.
                           521     ; Return Value:      None.
                           522     ;
                           523     ; Local Variables:   None.
                           524     ; Shared Variables:  None.
                           525     ; Global Variables:  None.
                           526     ;
                           527     ; Input:             None.
                           528     ; Output:            None.
                           529     ;
                           530     ; Error Handling:    None.
                           531     ;
                           532     ; Algorithms:        None.
                           533     ; Data Structures:   None.
                           534     ;
                           535     ; Registers Changed: None.
                           536     ;
                           537     ; Author:            Nancy Cao
                           538     ; Revision History:
                           539     ;     11/24/15  Nancy Cao   initial code
                           540     ;     11/30/15  Nancy Cao   updated comments
                           541     
00AC                       542     ModemStatus  PROC        NEAR
                           543                  PUBLIC      ModemStatus
                           544                  
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE   11


LOC  OBJ                  LINE     SOURCE

00AC BA0401                545         MOV     DX, SERIAL_MCR          ; get the MSR address to clear interrupt
00AF EC                    546         IN      AL, DX                  ; get modem status
                           547         
00B0 C3                    548         RET
                           549     
                           550     ModemStatus  ENDP
                           551     
                           552     ; Transmitter
                           553     ;
                           554     ; Description:       This function handles the trasmitter interrupt by
                           555     ;                    attempting to dequeue from the queue. If the queue
                           556     ;                    is empty, the kickstart is just set for the next character.
                           557     ;                    If not, a character is dequeued from the event queue and
                           558     ;                    put into the THR.
                           559     ;
                           560     ; Operation:         The function first checks if the queue is empty. If so,
                           561     ;                    it will set the kickstart and return. Otherwise, it will
                           562     ;                    dequeue the next character in the queue, and put the
                           563     ;                    dequeued character into THR.
                           564     ;
                           565     ; Arguments:         None.
                           566     ; Return Value:      None.
                           567     ;
                           568     ; Local Variables:   None.
                           569     ; Shared Variables:  None.
                           570     ; Global Variables:  None.
                           571     ;
                           572     ; Input:             None.
                           573     ; Output:            None.
                           574     ;
                           575     ; Error Handling:    None.
                           576     ;
                           577     ; Algorithms:        None.
                           578     ; Data Structures:   None.
                           579     ;
                           580     ; Registers Changed: None.
                           581     ;
                           582     ; Author:            Nancy Cao
                           583     ; Revision History:
                           584     ;     11/24/15  Nancy Cao   initial code
                           585     ;     11/30/15  Nancy Cao   updated comments
                           586     
00B1                       587     Transmitter    PROC       NEAR
                           588                   PUBLIC     Transmitter
                           589         
00B1 BE000090       R      590         MOV      SI, OFFSET(tx)     ; pass in address of the transfer queue at DS:SI
00B5 E80000         E      591         CALL     QueueEmpty         ; check if the queue is empty
00B8 7402                  592         JZ       EmptyQueue         ; if so bring up kickstart
00BA 7509                  593         JNZ      DequeueQueue       ; otherwise try to dequeue
                           594        
00BC                       595     EmptyQueue:
00BC C60605010190   R      596         MOV     kickstart, 1        ; flag kickstart to occur
00C2 EB0890                597         JMP     FinishTransmitter   ; and we are done
                           598     
00C5                       599     DequeueQueue:
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE   12


LOC  OBJ                  LINE     SOURCE

00C5 E80000         E      600         CALL    Dequeue             ; dequeue next character in queue
00C8 BA0001                601         MOV     DX, SERIAL_THR      ; address of the THR register
00CB EE                    602         OUT     DX, AL              ; output the dequeued character into THR
                           603         ;JMP    FinishTrasmitter    ; and we are done
                           604         
00CC                       605     FinishTransmitter:
00CC C3                    606         RET
                           607         
                           608     Transmitter    ENDP
                           609     
                           610     ; DataReadyTimeout
                           611     ;
                           612     ; Description:       This function looks up the value stored in RBR and
                           613     ;                    add it to the event queue.
                           614     ;
                           615     ; Operation:         The function reads in the value from the RBR register
                           616     ;                    and passes it into the event queue along with the event
                           617     ;                    value by using the EnqueueEvent function.
                           618     ;                    
                           619     ;
                           620     ; Arguments:         None.
                           621     ; Return Value:      None.
                           622     ;
                           623     ; Local Variables:   None.
                           624     ; Shared Variables:  None.
                           625     ; Global Variables:  None.
                           626     ;
                           627     ; Input:             None.
                           628     ; Output:            None.
                           629     ;
                           630     ; Error Handling:    None.
                           631     ;
                           632     ; Algorithms:        None.
                           633     ; Data Structures:   None.
                           634     ;
                           635     ; Registers Changed: AX, DX
                           636     ;
                           637     ; Author:            Nancy Cao
                           638     ; Revision History:
                           639     ;     11/24/15  Nancy Cao   initial code
                           640     ;     11/30/15  Nancy Cao   updated comments
                           641     
00CD                       642     DataReadyTimeout  PROC    NEAR
                           643                       PUBLIC  DataReadyTimeout
                           644                       
00CD BA0001                645          MOV    DX, SERIAL_RBR      ; address of the RBR register
00D0 EC                    646          IN     AL, DX              ; get the value at RBR
                           647     
00D1                       648     Thing:
00D1 B402                  649          MOV    AH, EVENT_RBR       ; the event value
00D3 E80000         E      650          CALL   EnqueueEvent        ; enqueue value and event value at RBR
                           651          
00D6 C3                    652          RET
                           653          
                           654     DataReadyTimeout  ENDP
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE   13


LOC  OBJ                  LINE     SOURCE

                           655     
                           656     ; ReceiverLineStatus
                           657     ;
                           658     ; Description:       This function looks up the value in the LSR to see if there
                           659     ;                    is an error that occured. If so, the error is
                           660     ;                    stored into the event queue.
                           661     ;
                           662     ; Operation:         The function first reads in the value of the LSR, and
                           663     ;                    masks out the error bits. If an error occured, the error
                           664     ;                    is enqueued aong with the event value for errors.
                           665     ;
                           666     ; Arguments:         None.
                           667     ; Return Value:      None.
                           668     ;
                           669     ; Local Variables:   None.
                           670     ; Shared Variables:  None.
                           671     ; Global Variables:  None.
                           672     ;
                           673     ; Input:             None.
                           674     ; Output:            None.
                           675     ;
                           676     ; Error Handling:    None.
                           677     ;
                           678     ; Algorithms:        None.
                           679     ; Data Structures:   None.
                           680     ;
                           681     ; Registers Changed: AX, DX
                           682     ;
                           683     ; Author:            Nancy Cao
                           684     ; Revision History:
                           685     ;     11/24/15  Nancy Cao   initial code
                           686     ;     11/30/15  Nancy Cao   updated comments
                           687     
00D7                       688     ReceiverLineStatus PROC   NEAR
                           689                        PUBLIC ReceiverLineStatus
                           690                   
00D7 BA0501                691         MOV     DX, SERIAL_LSR     ; address of the LSR register
00DA EC                    692         IN      AL, DX             ; read in the value at LSR
00DB 241E                  693         AND     AL, ERROR_MASK     ; get the error generated in LSR
00DD B403                  694         MOV     AH, EVENT_ERROR    ; the event value
00DF E80000         E      695         CALL    EnqueueEvent       ; enqueue the error and event value
                           696         
00E2 C3                    697         RET
                           698                   
                           699     ReceiverLineStatus ENDP
                           700     
00E3                       701     Jump_Table        LABEL   WORD
                           702                       PUBLIC  Jump_Table
                           703                       
00E3 AC00           R      704         DW      OFFSET(ModemStatus)          ; modem status interrupt
00E5 B100           R      705         DW      OFFSET(Transmitter)          ; transmitter holding register empty
00E7 CD00           R      706         DW      OFFSET(DataReadyTimeout)     ; receiver data ready/char timeout
00E9 D700           R      707         DW      OFFSET(ReceiverLineStatus)   ; receiver line status
                           708         
----                       709     CODE ENDS    
8086/87/88/186 MACRO ASSEMBLER    SERIALR                                                  20:10:40  01/07/;6  PAGE   14


LOC  OBJ                  LINE     SOURCE

                           710                
                           711     ;the data segment
                           712     
----                       713     DATA    SEGMENT PUBLIC  'DATA'
                           714     
0000 ??                    715     tx QUEUE <>                          ; transfer queue that stores data
0001 ??
0002 ????
0004 ??
0005 (256
     ??
     )
0105 ??                    716     kickstart DB     ?                   ; keeps track of when to handle interrupts
                           717     
----                       718     DATA    ENDS
                           719     
                           720     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
