8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE REMOTE
OBJECT MODULE PLACED IN REMOTE.OBJ
ASSEMBLER INVOKED BY:  C:\5XTOOLS\ASM86.EXE REMOTE.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1     NAME    REMOTE
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    Remote                                  ;
                             6     ;                       RoboTrike Remote Board Functions                     ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; Description:       This program includes the functions used by the remote
                            12     ;                    board of the RoboTrike. The public functions included are:
                            13     ;                        InitRemote         - initializes the remote board,
                            14     ;                                             including the chips, illegal,
                            15     ;                                             handlers, keypad, the display
                            16     ;                                             board, the serial, the timer 2
                            17     ;                                             which is used to debounce the
                            18     ;                                             keypad and display digits on the
                            19     ;                                             display board, and int 2, which is
                            20     ;                                             used to handle different
                            21     ;                                             interrupts for the serial. The
                            22     ;                                             event queue that stores events to
                            23     ;                                             be processed by the motor is also
                            24     ;                                             initialized. (public)
                            25     ;                        SetCriticalError - sets the critical error flag (public)
                            26     ;                  The private functions included are:
                            27     ;                        SerialPutString - puts a command through the serial,
                            28     ;                                          one character at a time (private)
                            29     ;                        KeyHandler     - handles any key presses; displays the
                            30     ;                                         function of the pressed key, then
                            31     ;                                         sends the command (private)
                            32     ;                        DataHandler - reads data received from the serial and
                            33     ;                                      displays it onto the display board (private)
                            34     ;                        ErrorHandler   - determines what error to display on
                            35     ;                                         the display board (private)
                            36     ;                        DoNothing      - a function that does nothing (private)
                            37     ;                 Tables included are:
                            38     ;                        JumpTable - a table of addresses of handler functions
                            39     ;                        CommandTable - a table of commands to send to the serial
                            40     ;                                       from the keys pressed
                            41     ;                        DisplayTable - a table of commands to display on the
                            42     ;                                       display board
                            43     ;                        ErrorTable - a table of possible errors to display on
                            44     ;                                     the display board
                            45     ;                        
                            46     ;
                            47     ; Revision History:
                            48     ;     12/01/15  Nancy Cao         initial comments and pseudocode
                            49     ;     12/25/15  Nancy Cao         initial code and updated comments
                            50     ;     12/28/15  Nancy Cao         updated comments
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                            51     
                            52     ; local include files
                            53 +1  $INCLUDE(REMOTE.INC)          ; remote constants used for the remote main
                      =1    54     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    55     ;                                                                            ;
                      =1    56     ;                                   REMOTE.INC                               ;
                      =1    57     ;                               Remote Definitions                           ;
                      =1    58     ;                                  Include File                              ;
                      =1    59     ;                                                                            ;
                      =1    60     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    61     
                      =1    62     ; This file contains the definitions for the remote functions.
                      =1    63     ;
                      =1    64     ; Revision History:
                      =1    65     ;     12/25/15  Nancy Cao      initial code and comment
                      =1    66     
                      =1    67     ; definitions
  0000                =1    68     NO_ERROR           EQU 0
  0001                =1    69     CRITICAL_ERROR     EQU 1
  0000                =1    70     ASCII_NULL         EQU 0    ; ASCII value of null
  000D                =1    71     ASCII_RET          EQU 13   ; ASCII value of '<RETURN>'
  0014                =1    72     ASCII_SPACE        EQU 20   ; ASCII value of space
  0008                =1    73     DISPLAY_SIZE       EQU 8    ; the max number of characters that can be displayed
  0003                =1    74     DISPLAY_LENGTH     EQU 3    ; the power of 2 of the length of the string displayed; 2
                                   ^3 = 8-bit string
                            75 +1  $INCLUDE(QUEUE.INC)           ; queue constants used for the queue
                      =1    76     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    77     ;                                                                            ;
                      =1    78     ;                                   QUEUE.INC                                ;
                      =1    79     ;                               Queue Definitions                            ;
                      =1    80     ;                                  Include File                              ;
                      =1    81     ;                                                                            ;
                      =1    82     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    83     
                      =1    84     ; This file contains the definitions for the queue functions.
                      =1    85     ;
                      =1    86     ; Revision History:
                      =1    87     ;     10/24/15  Nancy Cao      initial revision
                      =1    88     
                      =1    89     ; definitions
  00FF                =1    90     LENGTH_TEST   EQU 255               ; length of the queue
                      =1    91     
                      =1    92     ; Queue structure
                      =1    93     
----                  =1    94     QUEUE         STRUC
0000                  =1    95         headPtr   DB ?                  ; index of head/first element of queue
0001                  =1    96             tailPtr   DB ?                  ; index of tail/last element of queue
0002                  =1    97             len       DW ?                  ; length of queue in bytes
0004                  =1    98             s         DB ?                  ; size of elements in queue (1 or 2 bytes)
0005                  =1    99             array1Ds  DB 256 DUP (?)        ; 1D array designed to hold max 256 bytes
----                  =1   100     QUEUE         ENDS
                           101     
                           102     EXTRN InitCS:NEAR               ; used to initialize chip select
                           103     EXTRN ClrIRQVectors:NEAR        ; used to clear interrupt vector table
                           104     EXTRN InitKeypad:NEAR           ; used to initialize keypad
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                           105     EXTRN InitDisplay:NEAR          ; used to initialize display
                           106     EXTRN InitSerial:NEAR           ; used to initialize serial
                           107     EXTRN InitEventQueue:NEAR       ; used to initialize the event queue
                           108     EXTRN InitTimer2:NEAR           ; used to initialize timer 2
                           109     EXTRN InstallTimer2Handler:NEAR ; installs timer 2 handler
                           110     EXTRN InitInt2:NEAR             ; used to initialize interrupt 2
                           111     EXTRN InstallInt2Handler:NEAR   ; installs interrupt 2 handler
                           112     EXTRN Display:NEAR              ; displays a string onto the display board
                           113     EXTRN EnqueueEvent:NEAR         ; enqueues an event into the event queue
                           114     EXTRN DequeueEvent:NEAR         ; dequeues an event from the event queue
                           115     EXTRN SerialPutChar:NEAR        ; puts a character through the serial
                           116     
                           117     
                           118     CGROUP  GROUP   CODE
                           119     DGROUP  GROUP   DATA
                           120     
----                       121     CODE    SEGMENT PUBLIC 'CODE'
                           122     
                           123     
                           124             ASSUME  CS:CGROUP, DS:DGROUP
                           125     
                           126     ; Main loop
                           127     ; 
                           128     ; Description: The main loop initializes the remote board. The chips, illegal
                           129     ;              handlers, keypad, display board, and the serial are all
                           130     ;              initialized. Timer 2 and its handler is also initialized and
                           131     ;              installed, which is used to debounce on the keypad and display
                           132     ;              digits on the display board. Int 2 and its handler is also
                           133     ;              initialized and installed. The event queue, which stores events
                           134     ;              that the remote board should do, is initialized. The critical
                           135     ;              flag is set to no critical error, and then dequeues an event
                           136     ;              from the event queue to determine what type of event is next.
                           137     ;
                           138     ; Operation:   This function first initializes the chip select, and then clears
                           139     ;              the interrupt vector table. Timer 2 is then initialized, and its
                           140     ;              handler is installed. Int 2 is initialized, and its handler is
                           141     ;              installed. Then both keypad and display are initialized. The
                           142     ;              serial is also initialized, and the event queue is initialized.
                           143     ;              The critical flag is set to NO_ERROR, the display buffer is set
                           144     ;              to 0 since no data has been received, and a default message of
                           145     ;              "EE 51" is sent to the display board. Interrupts are
                           146     ;              then allowed before checking if there is a critical error. If
                           147     ;              there is no error, the function loops and attempts to dequeue the
                           148     ;              event queue over and over again. If at any time the critical flag is
                           149     ;              set, the remote is re-initialized before dequeuing events again.
                           150     ;              Once an event value is dequeued, it is converted into a word
                           151     ;              index to be used to look up the corresponding handler in the
                           152     ;              JumpTable (no action, key handler, data handler, or error handler).
                           153     ;
                           154     ; Arguments:        None.
                           155     ; Return Value:     None.
                           156     ; Local Variables:  None.
                           157     ; Shared Variables: criticalFlag - the critical error flag (DS, R/W)
                           158     ;                   displayBuffer - the index of the display for the data
                           159     ;                                   received (DS, W)
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           160     ;                   startmsg - a starting message for the remote side (DS, R)
                           161     ; Global Variables: None.
                           162     ;
                           163     ; Input: None.
                           164     ; Output: None.
                           165     ;
                           166     ; Error Handling: None.
                           167     ;
                           168     ; Limitations: None.
                           169     ;
                           170     ; Algorithms: None.
                           171     ; Data Structures: Queue.
                           172     ;
                           173     ; Registers Changed: AX, SI, DS, BX, zero flag
                           174     ;
                           175     ; Author: Nancy Cao
                           176     ; Revision History:
                           177     ;     12/01/15  Nancy Cao        initial comments and pseudocode
                           178     ;     12/25/15  Nancy Cao        initial code and comments
                           179     ;     12/28/15  Nancy Cao        updated comments
                           180     ;
                           181     
0000                       182     START:  
                           183     
0000                       184     MAIN:
0000 B8----         R      185             MOV     AX, DGROUP              ; initialize the stack pointer
0003 8ED0                  186             MOV     SS, AX
0005 BCE00190       R      187             MOV     SP, OFFSET(DGROUP:TopOfStack)
                           188     
0009 B8----         R      189             MOV     AX, DGROUP              ; initialize the data segment
000C 8ED8                  190             MOV     DS, AX
                           191     
000E                       192     ResetRemote:
000E E80000         E      193             CALL    InitCS                  ; initialize the 80188 chip selects
                           194                                             ; assumes LCS and UCS already setup
                           195                                        
0011 E80000         E      196             CALL    ClrIRQVectors           ; clear interrupt vector table
                           197             
0014 E80000         E      198             CALL    InstallTimer2Handler    ; install the timer 2 handler
                           199             
0017 E80000         E      200             CALL    InitTimer2              ; initialize timer 2
                           201            
001A E80000         E      202             CALL    InstallInt2Handler      ; install the interrupt 2 handler
                           203     
001D E80000         E      204             CALL    InitInt2                ; initialize interrupt 2
                           205     
0020 E80000         E      206             CALL    InitKeypad              ; initialize the keypad
                           207                 
0023 E80000         E      208             CALL    InitDisplay             ; initialize the display
                           209             
0026 E80000         E      210             CALL    InitSerial              ; initialize the serial
                           211               
0029 E80000         E      212             CALL    InitEventQueue          ; initialize the event queue
                           213                 
002C C60600000090   R      214             MOV     criticalFlag, NO_ERROR  ; reset critical error flag
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

0032 C7060A000000   R      215             MOV     displayBuffer, 0         ; reset buffer
                           216             
0038 BE100290       R      217             MOV     SI, OFFSET(startmsg)    ; display start message on the display
003C 0E                    218             PUSH    CS                      ; switch to ES:SI 
003D 07                    219             POP     ES
003E E80000         E      220             CALL    Display                 ; display start message
                           221               
0041 FB                    222             STI                             ; and finally allow interrupts.
                           223             
0042                       224     DequeueEventValue:
0042 803E000001     R      225             CMP criticalFlag, CRITICAL_ERROR ; check if there is a critical error
0047 74C5                  226             JE  ResetRemote                  ; if so, re-initialize everything
                           227             
0049 E80000         E      228             CALL DequeueEvent                ; otherwise dequeue an event
                           229             
004C 74F4                  230             JZ DequeueEventValue             ; if nothing was dequeued try again
                           231             
004E 8ADC                  232             MOV BL, AH                       ; move event value into lower bit of BX
                           233                                              ; index
0050 B700                  234             MOV BH, 0                        ; clear higher bit of BX
0052 D1E3                  235             SHL BX, 1                        ; convert byte index to word index,
                           236                                              ; since JumpTable is word type
                           237             
0054 2EFF97E000     R      238             CALL CS:JumpTable[BX]            ; call function corresponding to event
                           239             
0059 EBE7                  240             JMP DequeueEventValue            ; keep dequeuing event values
                           241             
005B F4                    242             HLT                              ; never executed (hopefully)
                           243      
                           244     ; SetCriticalError
                           245     ;
                           246     ; Description:       This function sets the critical error flag.
                           247     ;
                           248     ; Operation:         The critical error flag is set.
                           249     ;
                           250     ; Arguments:         None.
                           251     ; Return Value:      None.
                           252     ;
                           253     ; Local Variables:   None.
                           254     ; Shared Variables:  criticalFlag - the critical error flag (DS, W)
                           255     ; Global Variables:  None.
                           256     ;
                           257     ; Input:             None.
                           258     ; Output:            None.
                           259     ;
                           260     ; Error Handling:    None.
                           261     ;
                           262     ; Algorithms:        None.
                           263     ; Data Structures:   None.
                           264     ;
                           265     ; Registers Changed: None.
                           266     ;
                           267     ; Author:            Nancy Cao
                           268     ; Revision History:
                           269     ;     12/26/15  Nancy Cao   initial code and comments
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           270     ;     12/28/15  Nancy Cao   updated comments
                           271     
005C                       272     SetCriticalError     PROC    NEAR
                           273                          PUBLIC  SetCriticalError
                           274     
005C C60600000190   R      275         MOV     criticalFlag, CRITICAL_ERROR  ; set the critical flag to be a
                           276                                               ; critical error
0062 C3                    277         RET
                           278           
                           279     SetCriticalError     ENDP
                           280     
                           281     ; SerialPutString
                           282     ;
                           283     ; Description:       This function retrieves the appropriate command to pass
                           284     ;                    to the trike from the CommandTable and passes it through
                           285     ;                    the serial one character at a time using SerialPutChar.
                           286     ;                    ASCII_NULL is the signal that the entire command has been
                           287     ;                    sent through.
                           288     ;
                           289     ; Operation:         The function starts by getting the appropriate command to
                           290     ;                    pass to the serial by looking at BX, the index of the
                           291     ;                    command from CommandTable to send over to the trike. It
                           292     ;                    then goes through each character of the command at a time
                           293     ;                    and sends it to the trike via SerialPutChar. The index is
                           294     ;                    increased to send the next character. This loops until the
                           295     ;                    null terminal is read.
                           296     ;
                           297     ; Arguments:         DX - the index of the command to put through the serial
                           298     ; Return Value:      None.
                           299     ;
                           300     ; Local Variables:   None.
                           301     ; Shared Variables:  None.
                           302     ; Global Variables:  None.
                           303     ;
                           304     ; Input:             None.
                           305     ; Output:            None.
                           306     ;
                           307     ; Error Handling:    None.
                           308     ;
                           309     ; Algorithms:        None.
                           310     ; Data Structures:   None.
                           311     ;
                           312     ; Registers Changed: AX, BX
                           313     ;
                           314     ; Author:            Nancy Cao
                           315     ; Revision History:
                           316     ;     12/26/15  Nancy Cao   initial code and comments
                           317     ;     12/28/15  Nancy Cao   updated comments
                           318     ;     01/04/15  Nancy Cao   fixed some bugs
                           319     
0063                       320     SerialPutString     PROC    NEAR
                           321         
0063 8BDA                  322         MOV  BX, DX                   ; index of the command to send
                           323         
0065                       324     CheckEndString:
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

0065 2E8A87E800     R      325         MOV  AL, CS:CommandTable[BX]  ; get current character
                           326         
006A                       327     Break10:
006A 3C00                  328         CMP   AL, ASCII_NULL          ; check if character is the end of string
006C 7408                  329         JE    PutStringFinish         ; if yes, we are done
                           330         ;JNE  SendChar                ; otherwise continue sending characters to
                           331                                       ; serial
                           332     
006E                       333     SendChar:                         ; send the character over the serial
006E 53                    334         PUSH  BX                      ; don't want SerialPutChar to change index
006F E80000         E      335         CALL  SerialPutChar           ; put the character over the serial
0072 5B                    336         POP   BX                      ; retreive saved index
0073 43                    337         INC   BX                      ; increment index to next character
0074 EBEF                  338         JMP   CheckEndString          ; check if this character is the end char
                           339     
0076                       340     PutStringFinish:
0076 C3                    341         RET
                           342           
                           343     SerialPutString     ENDP
                           344                     
                           345                   
                           346     ; KeyHandler
                           347     ;
                           348     ; Description:       This function looks for the string to display determined
                           349     ;                    by what key was pressed on the keypad. The argument is the
                           350     ;                    index of the key value that can be used to look up in the
                           351     ;                    CommandTable to see the appropriate string to display.
                           352     ;                    The display board is cleared before calling display. It
                           353     ;                    then sends the appropriate command to the motor side by
                           354     ;                    calling SerialPutString.
                           355     ;
                           356     ; Operation:         The function first takes the index argument and stores
                           357     ;                    it in DX in preparation for looking up the appropriate
                           358     ;                    string to display in the CommandTable. Afterwards, the
                           359     ;                    address of the DisplayTable is found and the index is
                           360     ;                    shifted appropriately to take account of the size of the
                           361     ;                    string to display. The address and the index value is added
                           362     ;                    to get the address of the command to display. The function
                           363     ;                    switches from CS to ES to write into ES instead, before
                           364     ;                    calling the Display function. Afterwards, SerialPutString
                           365     ;                    is called to send the appropriate command to the serial to
                           366     ;                    the motors so that the specified action can be performed.
                           367     ;
                           368     ; Arguments:         AL - the event value
                           369     ; Return Value:      None.
                           370     ;
                           371     ; Local Variables:   None.
                           372     ; Shared Variables:  None.
                           373     ; Global Variables:  None.
                           374     ;
                           375     ; Input:             None.
                           376     ; Output:            None.
                           377     ;
                           378     ; Error Handling:    None.
                           379     ;
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           380     ; Algorithms:        None.
                           381     ; Data Structures:   None.
                           382     ;
                           383     ; Registers Changed: DX, SI
                           384     ;
                           385     ; Author:            Nancy Cao
                           386     ; Revision History:
                           387     ;     12/01/15  Nancy Cao   initial comments and pseudocode
                           388     ;     12/26/15  Nancy Cao   initial code and updated comments
                           389     ;     12/28/15  Nancy Cao   updated comments
                           390     ;     01/04/15  Nancy Cao   fixed some bugs
                           391     
0077                       392     KeyHandler     PROC    NEAR
                           393     
0077                       394     DisplayKeyCommand:
0077 8AD0                  395         MOV  DL, AL                          ; move index to DL
0079 B600                  396         MOV  DH, 0                           ; clear higher bit of DX so DX can be
                           397                                              ; index of DisplayTable
007B 8D366801       R      398         LEA  SI, CS:DisplayTable             ; get address to beginning of DisplayTable
007F C1E203                399         SHL  DX, DISPLAY_LENGTH              ; multiply index by length of string (8-bit 
                                   so shift by 3 since 2^3 = 8)
0082 03F2                  400         ADD  SI, DX                          ; get the address of appropriate display
                           401                                              ; and store it as the address argument
                           402                                              ; for Display
0084 0E                    403         PUSH CS                              ; move to ES:SI
0085 07                    404         POP  ES
0086 E80000         E      405         CALL Display                         ; display the string
                           406         ;JMP SendCommandToSerial             ; send appropriate command to motors
                           407     
0089                       408     SendCommandToSerial:
0089 E8D7FF                409         CALL SerialPutString                 ; send the command through the serial
                           410                                              ; to the motors; index stored in DX
008C C3                    411         RET
                           412           
                           413     KeyHandler     ENDP
                           414     
                           415     ; DataHander
                           416     ;
                           417     ; Description:       This function takes the character received from the serial
                           418     ;                    and determines whether to display the current data
                           419     ;                    received from the data or to continue appending characters
                           420     ;                    to the current string to display. It will display the
                           421     ;                    current string if the return character is reached or the
                           422     ;                    string has reached DISPLAY_SIZE.
                           423     ;
                           424     ; Operation:         This function first checks if the character read in is
                           425     ;                    the return character. If so, the current string saved from
                           426     ;                    the serial should be displayed. Otherwise, the function
                           427     ;                    checks if the length of the current string has already
                           428     ;                    reached DISPLAY_SIZE. If so, the current string saved from
                           429     ;                    the serial should be displayed. Otherwise, the current
                           430     ;                    character read is appended to the end of displayStr, and
                           431     ;                    the buffer is incremented for the next character. To display,
                           432     ;                    the function first appends a null character to the end
                           433     ;                    before moving to ES:SI to display displayStr. Afterwards,
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           434     ;                    the buffer is reset for the next data received.
                           435     ;
                           436     ; Arguments:         AL - the character read from the serial
                           437     ; Return Value:      None.
                           438     ;
                           439     ; Local Variables:   None.
                           440     ; Shared Variables:  displayBuffer - the current max index of the current string
                           441     ;                                   to display (DS, R/W)
                           442     ;                    displayStr   - the current string to display (DS, W)
                           443     ;                    
                           444     ; Global Variables:  None.
                           445     ;
                           446     ; Input:             None.
                           447     ; Output:            None.
                           448     ;
                           449     ; Error Handling:    None.
                           450     ;
                           451     ; Algorithms:        None.
                           452     ; Data Structures:   None.
                           453     ;
                           454     ; Registers Changed: AX, BX, SI
                           455     ;
                           456     ; Author:            Nancy Cao
                           457     ; Revision History:
                           458     ;     12/01/15  Nancy Cao   initial comments and pseudocode
                           459     ;     12/26/15  Nancy Cao   initial code and comments
                           460     ;     12/28/15  Nancy Cao   updated comments
                           461     
008D                       462     DataHandler     PROC    NEAR
                           463     
008D                       464     CheckEndData:
008D 3C0D                  465         CMP  AL, ASCII_RET      ; check if we are at the end of reading data
008F 741C                  466         JE   DisplayData        ; if yes display the entire data
0091 7500                  467         JNE  TryAppendChar      ; otherwise attempt to append character
                           468         
0093                       469     TryAppendChar:
0093 833E0A0008     R      470         CMP displayBuffer, DISPLAY_SIZE    ; check if max display size is reached
0098 7430                  471         JZ  FinishDataHandler              ; if yes go ahead and display
                           472         ;JMP AppendChar                    ; otherwise continue reading in char
                           473         
009A                       474     AppendChar:
009A 8B1E0A00       R      475         MOV  BX, displayBuffer             ; get the current index of where the
                           476                                            ; string on display ends
009E BE010090       R      477         MOV  SI, OFFSET(displayStr)        ; get address of displayStr
00A2 03F3                  478         ADD  SI, BX                        ; current address to add next character
00A4 8804                  479         MOV  [SI], AL                      ; add character
00A6 FF060A00       R      480         INC  displayBuffer                 ; increment index to the next character
00AA EB1E90                481         JMP  FinishDataHandler             ; finish handling data
                           482         
00AD                       483     DisplayData:
                           484     
00AD 8B1E0A00       R      485         MOV  BX, displayBuffer             ; get the current index of where the
                           486                                            ; string on display ends
00B1 BE010090       R      487         MOV  SI, OFFSET(displayStr)        ; get address of displayStr
00B5 03F3                  488         ADD  SI, BX                        ; current address to add next character
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

00B7 B000                  489         MOV  AL, ASCII_NULL                ; assign null value
00B9 8804                  490         MOV  [SI], AL                      ; append null character to string to display
00BB BE010090       R      491         MOV  SI, OFFSET(displayStr)        ; get address of string to display
00BF 1E                    492         PUSH DS                            ; move to ES:SI
00C0 07                    493         POP  ES
00C1 E80000         E      494         CALL Display                       ; display the string
00C4 C7060A000000   R      495         MOV  displayBuffer, 0              ; reset to beginning of display
                           496         ;JMP FinishDataHandler             ; finish handling data
                           497         
00CA                       498     FinishDataHandler:
00CA C3                    499         RET
                           500           
                           501     DataHandler     ENDP
                           502     
                           503     ; ErrorHander
                           504     ;
                           505     ; Description:       This function handles error events. An error index is
                           506     ;                    passed in, and the function looks up the appropriate error
                           507     ;                    to display on the display board
                           508     ;
                           509     ; Operation:         The function makes the passed in index into an index for
                           510     ;                    lookup in ErrorTable. The address of ErrorTable is stored
                           511     ;                    as an argument, the index is shifted appropriately to take
                           512     ;                    account of the size of the string to display. The address
                           513     ;                    and the index value is added to get the address of the
                           514     ;                    command to display. The function switches from CS to ES to
                           515     ;                    write into ES instead, before calling the Display function.
                           516     ;
                           517     ; Arguments:         AL - the index of ErrorTable
                           518     ; Return Value:      None.
                           519     ;
                           520     ; Local Variables:   None.
                           521     ; Shared Variables:  None.
                           522     ; Global Variables:  None.
                           523     ;
                           524     ; Input:             None.
                           525     ; Output:            None.
                           526     ;
                           527     ; Error Handling:    None.
                           528     ;
                           529     ; Algorithms:        None.
                           530     ; Data Structures:   Queue.
                           531     ;
                           532     ; Registers Changed: DX, SI
                           533     ;
                           534     ; Author:            Nancy Cao
                           535     ; Revision History:
                           536     ;     12/01/15  Nancy Cao   initial comments and pseudocode
                           537     ;     12/26/15  Nancy Cao   updated code and comments
                           538     ;     12/28/15  Nancy Cao   updated comments
                           539     
00CB                       540     ErrorHandler     PROC    NEAR
                           541     
00CB                       542     DisplayErrorMessage:   
00CB 8AD0                  543         MOV  DL, AL                          ; move index to DL
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE   11


LOC  OBJ                  LINE     SOURCE

00CD B600                  544         MOV  DH, 0                           ; clear higher bit of DX so DX can be
                           545                                              ; index of DisplayTable
00CF 8D36E801       R      546         LEA  SI, CS:ErrorTable               ; get address to beginning of ErrorTable
00D3 C1E203                547         SHL  DX, DISPLAY_LENGTH              ; multiply index by length of string (8-bit 
                                   so shift by 3 since 2^3 = 8)
00D6 03F2                  548         ADD  SI, DX                          ; get the address of appropriate display
                           549                                              ; and store it as the address argument
                           550                                              ; for Display
00D8 0E                    551         PUSH CS                              ; move to ES:SI
00D9 07                    552         POP  ES
00DA E80000         E      553         CALL Display                         ; display the string
                           554     
00DD C3                    555         RET
                           556             
                           557     ErrorHandler     ENDP
                           558     
                           559     ; DoNothing
                           560     ;
                           561     ; Description:       This function does nothing.
                           562     ;
                           563     ; Operation:         This function does nothing.
                           564     ;
                           565     ; Arguments:         None.
                           566     ; Return Value:      None.
                           567     ;
                           568     ; Local Variables:   None.
                           569     ; Shared Variables:  None.
                           570     ; Global Variables:  None.
                           571     ;
                           572     ; Input:             None.
                           573     ; Output:            None.
                           574     ;
                           575     ; Error Handling:    None.
                           576     ;
                           577     ; Algorithms:        None.
                           578     ; Data Structures:   None.
                           579     ;
                           580     ; Registers Changed: None.
                           581     ;
                           582     ; Author:            Nancy Cao
                           583     ; Revision History:
                           584     ;     12/21/15  Nancy Cao   initial code and comments
                           585     
00DE                       586     DoNothing      PROC        NEAR
                           587     
00DE 90                    588         NOP
00DF C3                    589         RET
                           590     
                           591     DoNothing     ENDP
                           592     
                           593     ; A table of addresses of handler functions
00E0                       594     JumpTable   LABEL   WORD
                           595     
00E0 DE00           R      596         DW        OFFSET(DoNothing)      ; does nothing
00E2 7700           R      597         DW        OFFSET(KeyHandler)     ; handles key presses
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE   12


LOC  OBJ                  LINE     SOURCE

00E4 8D00           R      598         DW        OFFSET(DataHandler)    ; handles commands to display
00E6 CB00           R      599         DW        OFFSET(ErrorHandler)   ; handles errors
                           600     
                           601     ; A table of commands corresponding to the keys pressed on the keypad
00E8                       602     CommandTable LABEL BYTE
                           603                  PUBLIC  CommandTable
                           604     
00E8 562B31303020          605         DB        'V+100 ', ASCII_RET, ASCII_NULL  ; KEY_0: increase speed by 100
00EE 0D
00EF 00
00F0 562D31303020          606         DB        'V-100 ', ASCII_RET, ASCII_NULL  ; KEY_1: decrease speed by 100
00F6 0D
00F7 00
00F8 562B35303020          607         DB        'V+500 ', ASCII_RET, ASCII_NULL  ; KEY_2: increase speed by 500
00FE 0D
00FF 00
0100 562D35303020          608         DB        'V-500 ', ASCII_RET, ASCII_NULL  ; KEY_3: decrease speed by 500
0106 0D
0107 00
0108 533020202020          609         DB        'S0    ', ASCII_RET, ASCII_NULL  ; KEY_4: stop the RoboTikre
010E 0D
010F 00
0110 533332373637          610         DB        'S32767', ASCII_RET, ASCII_NULL  ; KEY_5: set to 1/2 MAX_SPEED
0116 0D
0117 00
0118 563332373637          611         DB        'V32767', ASCII_RET, ASCII_NULL  ; KEY_6: set to MAX_SPEED
011E 0D
011F 00
0120 442B31302020          612         DB        'D+10  ', ASCII_RET, ASCII_NULL  ; KEY_7: turn RoboTrike 10 degrees rig
                                   ht    
0126 0D
0127 00
0128 442D31302020          613         DB        'D-10  ', ASCII_RET, ASCII_NULL  ; KEY_8: turn RoboTrike 10 degrees lef
                                   t
012E 0D
012F 00
0130 442B33302020          614         DB        'D+30  ', ASCII_RET, ASCII_NULL  ; KEY_9: turn RoboTrike 30 degrees rig
                                   ht
0136 0D
0137 00
0138 442D33302020          615         DB        'D-30  ', ASCII_RET, ASCII_NULL  ; KEY_A: turn RoboTrike 30 degrees lef
                                   t
013E 0D
013F 00
0140 462020202020          616         DB        'F     ', ASCII_RET, ASCII_NULL  ; KEY_B: turn turret laser on
0146 0D
0147 00
0148 4F2020202020          617         DB        'O     ', ASCII_RET, ASCII_NULL  ; KEY_C: turn turret laser off
014E 0D
014F 00
0150 202020202020          618         DB        '      ', ASCII_RET, ASCII_NULL  ; KEY_D: do nothing
0156 0D
0157 00
0158 202020202020          619         DB        '      ', ASCII_RET, ASCII_NULL  ; KEY_E: do nothing
015E 0D
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE   13


LOC  OBJ                  LINE     SOURCE

015F 00
0160 202020202020          620         DB        '      ', ASCII_RET, ASCII_NULL  ; KEY_F: do nothing
0166 0D
0167 00
                           621         
                           622     ; A table of messages corresponding to keys to display on the display board
0168                       623     DisplayTable LABEL BYTE
                           624                  PUBLIC DisplayTable
                           625                             
0168 31202020202020        626         DB        '1      ', ASCII_NULL             ; increase speed by 100
016F 00
0170 32202020202020        627         DB        '2      ', ASCII_NULL             ; decrease speed by 100
0177 00
0178 33202020202020        628         DB        '3      ', ASCII_NULL             ; increase speed by 500
017F 00
0180 34202020202020        629         DB        '4      ', ASCII_NULL             ; decrease speed by 500
0187 00
0188 35202020202020        630         DB        '5      ', ASCII_NULL             ; stop RoboTrike
018F 00
0190 36202020202020        631         DB        '6      ', ASCII_NULL             ; set speed to 1/2 MAX_SPEED
0197 00
0198 37202020202020        632         DB        '7      ', ASCII_NULL             ; set speed to MAX_SPEED
019F 00
01A0 38202020202020        633         DB        '8      ', ASCII_NULL             ; turn RoboTrike 10 degrees right
01A7 00
01A8 39202020202020        634         DB        '9      ', ASCII_NULL             ; turn RoboTrike 10 degrees left
01AF 00
01B0 31302020202020        635         DB        '10     ', ASCII_NULL             ; turn RoboTrike 30 degrees right
01B7 00
01B8 31312020202020        636         DB        '11     ', ASCII_NULL             ; turn RoboTrike 30 degrees left
01BF 00
01C0 31322020202020        637         DB        '12     ', ASCII_NULL             ; fire laser
01C7 00
01C8 31332020202020        638         DB        '13     ', ASCII_NULL             ; turn laser off
01CF 00
01D0 31342020202020        639         DB        '14     ', ASCII_NULL             ; do nothing
01D7 00
01D8 31352020202020        640         DB        '15     ', ASCII_NULL             ; do nothing
01DF 00
01E0 31362020202020        641         DB        '16     ', ASCII_NULL             ; do nothing
01E7 00
                           642     
                           643     ; A table of error messages to display onto the display board
01E8                       644     ErrorTable LABEL BYTE
                           645                PUBLIC ErrorTable
                           646                             
01E8 31372020202020        647         DB        '17     ', ASCII_NULL             ; framing error
01EF 00
01F0 31382020202020        648         DB        '18     ', ASCII_NULL             ; parity error       
01F7 00
01F8 31392020202020        649         DB        '19     ', ASCII_NULL             ; break error
01FF 00
0200 32302020202020        650         DB        '20     ', ASCII_NULL             ; overrun error
0207 00
0208 32312020202020        651         DB        '21     ', ASCII_NULL             ; buffer overflow error
8086/87/88/186 MACRO ASSEMBLER    REMOTE                                                   20:10:37  01/07/;6  PAGE   14


LOC  OBJ                  LINE     SOURCE

020F 00
                           652              
0210 45452035312020        653     startmsg   DB 'EE 51  ', ASCII_NULL             ; default message
0217 00
                           654     
----                       655     CODE ENDS
                           656     
                           657     
                           658     ;the data segment
                           659     
----                       660     DATA    SEGMENT PUBLIC  'DATA'
                           661     
0000 00                    662     criticalFlag  DB NO_ERROR      ; the flag that indicates if a critical
                           663                                            ; error has occurred
0001 (9                    664     displayStr    DB DISPLAY_SIZE + 1 DUP(?) ; the data sent from motors to display
     ??
     )
000A 0000                  665     displayBuffer DW 0                      ; the current index of char in display
                           666     
----                       667     DATA    ENDS
                           668     
                           669     
                           670     ;the stack
                           671     
----                       672     STACK           SEGMENT STACK  'STACK'
                           673     
0000 (80                   674                     DB      80 DUP ('Stack ')       ;240 words
     537461636B20
     )
                           675     
01E0                       676     TopOfStack      LABEL   WORD
                           677     
----                       678     STACK           ENDS
                           679     
                           680     
                           681     
                           682             END     START

ASSEMBLY COMPLETE, NO ERRORS FOUND
