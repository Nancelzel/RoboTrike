8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  20:10:38  01/07/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE DISPLAY
OBJECT MODULE PLACED IN DISPLAY.OBJ
ASSEMBLER INVOKED BY:  C:\5XTOOLS\ASM86.EXE DISPLAY.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1     NAME    DISPLAY
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    DISPLAY                                 ;
                             6     ;                          RoboTrike Display Functions                       ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; Description:       This program includes the routines for the RoboTrike
                            12     ;                    display. The public functions included are:
                            13     ;                        InitDisplay       - initializes the RoboTrike Display
                            14     ;                                            by clearing out whatever was
                            15     ;                                            previously displayed on the board
                            16     ;                        Display           - converts every ASCII value to
                            17     ;                                            7-seg code which is stored into
                            18     ;                                            muxBuffer
                            19     ;                        DisplayNum        - takes a 16-bit signed value and
                            20     ;                                            outputs it in decimal to display
                            21     ;                        DisplayHex        - takes a 16-bit unsigned value and
                            22     ;                                            outputs it in hex to display
                            23     ;                        Multiplex         - cycles to the next digit to display
                            24     ;                                            on the LED board
                            25     ;
                            26     ; Revision History:
                            27     ;     10/27/15  Nancy Cao         initial comments and pseudocode
                            28     ;     11/01/15  Nancy Cao         updated comments
                            29     ;     11/01/15  Nancy Cao         moved TimerEventHandler to timer.asm
                            30     ;     11/03/15  Nancy Cao         fixed incrementing CURRENT_DIGIT appropriately
                            31     ;     11/03/15  Nancy Cao         updated comments
                            32     
                            33     ; local include files
                            34 +1  $INCLUDE(DISPLAY.INC)        ; display constants ASCII / mux buffer definition
                      =1    35     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    36     ;                                                                            ;
                      =1    37     ;                                  DISPLAY.INC                               ;
                      =1    38     ;                              Display Definitions                           ;
                      =1    39     ;                                 Include File                               ;
                      =1    40     ;                                                                            ;
                      =1    41     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    42     
                      =1    43     ; This file contains the definitions for the display functions.
                      =1    44     ;
                      =1    45     ; Revision History:
                      =1    46     ;     10/27/15  Nancy Cao      initial revision
                      =1    47     ;     11/01/15  Nancy Cao      updated definitions and comments
                      =1    48     
                      =1    49     ; definitions
  0008                =1    50     MAX_DIGIT       EQU     8              ; the max digits that can be displayed
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  20:10:38  01/07/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                            51 +1  $INCLUDE(CONVERTS.INC)
                      =1    52     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    53     ;                                                                            ;
                      =1    54     ;                                  CONVERTS.INC                              ;
                      =1    55     ;                              Converts Definitions                          ;
                      =1    56     ;                                  Include File                              ;
                      =1    57     ;                                                                            ;
                      =1    58     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    59     
                      =1    60     ; This file contains the definitions for the conversion functions.
                      =1    61     ;
                      =1    62     ; Revision History:
                      =1    63     ;     10/18/15  Nancy Cao      initial revision
                      =1    64     
                      =1    65     
                      =1    66     ;definitions
                      =1    67     
  0000                =1    68     ASCII_NULL         EQU 0     ;string termination character (<null>)
  002B                =1    69     PLUS               EQU '+'   ;the ASCII positive sign
  002D                =1    70     MINUS              EQU '-'   ;the ASCII negative sign
  0030                =1    71     ZERO               EQU '0'   ;the ASCII 0 sign
  0041                =1    72     LETTER_A           EQU 'A'   ;the ASCII A
  2710                =1    73     MAX_DEC_POW        EQU 10000 ;10^4, the largest 16-bit power of decimal 10
  1000                =1    74     MAX_HEX_POW        EQU 4096  ;16^3, the largest 16-but power of hex 16
                            75     
                            76     EXTRN Dec2String:NEAR       ; used to convert decimal to ASCII string
                            77     EXTRN Hex2String:NEAR       ; used to convert hexadecimal to ASCII string
                            78     EXTRN ASCIISegTable:BYTE    ; a table of conversions from ASCII to 7-seg code
                            79     
                            80     CGROUP  GROUP   CODE
                            81     DGROUP  GROUP   DATA
                            82     
                            83     
----                        84     CODE    SEGMENT PUBLIC 'CODE'
                            85     
                            86     
                            87             ASSUME  CS:CGROUP, DS:DGROUP
                            88     
                            89     ; InitDisplay
                            90     ; 
                            91     ; Description: This function clears all bytes stored in numString and
                            92     ;              and muxBuffer for the next value. Both numString and
                            93     ;              muxBuffer hold at most MAX_DIGIT bytes, so the function will
                            94     ;              loop MAX_DIGIT times to clear every byte. The function also
                            95     ;              initializes the current digit to be 0 (the first digit).
                            96     ;
                            97     ; Operation:   The function sets a counter to 0, and initializes the current
                            98     ;              digit to display to be the first one (0). It then increments the
                            99     ;              counter through a loop until the counter is no longer less than
                           100     ;              MAX_DIGIT, meaning it has reached the end of both numString and
                           101     ;              muxBuffer. Since both numString and muxBuffer are the same size,
                           102     ;              every iteration a byte at index = counter from both arrays are
                           103     ;              set to 0.
                           104     ;
                           105     ; Arguments:        None.
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  20:10:38  01/07/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                           106     ; Return Value:     None.
                           107     ; Local Variables:  None.
                           108     ; Shared Variables: numString - contains the ASCII characters to display
                           109     ;                   muxBuffer - contains the 7-segment codes translated from
                           110     ;                               the ASCII characters to display.
                           111     ; Global Variables: None.
                           112     ;
                           113     ; Input:  None.
                           114     ; Output: An empty display board.
                           115     ;
                           116     ; Error Handling: None.
                           117     ;
                           118     ; Limitations: None.
                           119     ;
                           120     ; Algorithms: None.
                           121     ; Data Structures: numString (an array that stores every ASCII char to display)
                           122     ;                  muxBuffer (an array that stores every 7-seg code to display)
                           123     ;
                           124     ; Registers Changed: BX
                           125     ; Stack depth: 1 word.
                           126     ;
                           127     ; Author: Nancy Cao
                           128     ; Revision History:
                           129     ;     11/01/15  Nancy Cao        initial revision
                           130     ;     11/01/15  Nancy Cao        added comments
                           131     ;     11/03/15  Nancy Cao        added comments
                           132     ;
                           133     
0000                       134     InitDisplay  PROC        NEAR
                           135                  PUBLIC      InitDisplay
                           136     
0000 53                    137             PUSH BX                 ; make sure not to rewrite data in register
                           138         
0001 BB0000                139             MOV BX, 0               ; initialize counter to store all the arrays
0004 C70610000000   R      140         MOV CURRENT_DIGIT, 0    ; first digit to display
                           141     
000A                       142     EndOfReset:                 ; check if byte is initialized
000A 83FB08                143         CMP BX, MAX_DIGIT       ; check if end of the arrays are reached
000D 740F                  144             JZ EndDisplayInit       ; if yes, finished clearing out all the bytes
                           145         ;JNZ ResetDisplay       ; otherwise continue initalizing arrays
                           146     
000F                       147     ResetDisplay:               ; reset display by clearing numString and muxBuffer
000F C68700000090   R      148             MOV numString[BX], 0    ; clear current byte stored in numString
0015 C68708000090   R      149             MOV muxBuffer[BX], 0    ; clear current byte stored in muxBuffer
001B 43                    150             INC BX                  ; increment to next byte to clear
001C EBEC                  151             JMP EndOfReset          ; loop to next byte
                           152     
001E                       153     EndDisplayInit:             ; all bytes are cleared out
001E 5B                    154             Pop BX                  ; return old data to register
001F C3                    155             RET                     ; finished clearing out display for next value
                           156             
                           157     InitDisplay       ENDP
                           158     
                           159     
                           160     ; Display
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  20:10:38  01/07/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           161     ; 
                           162     ; Description: This function takes in an argument that references the address of
                           163     ;              the <null> terminated string that is no more than 5 ASCII
                           164     ;              characters long (for a decimal) or 4 ASCII characters long (for
                           165     ;              a hex). The address refers to a MAX_DIGIT length array
                           166     ;              (numString) that stores the string. It translates the string into
                           167     ;              7-segment code. The 7-segment code is then stored in a shared
                           168     ;              muxBuffer, whose length is also MAX_DIGIT. If the translated
                           169     ;              ASCII characters end up being more than MAX_DIGIT long, the rest
                           170     ;              of the digits are truncated to fit the display board. If the
                           171     ;              translated ASCII characters do not fill up the display board,
                           172     ;              the digits are left justified and unused digits are left blank.
                           173     ;
                           174     ; Operation:   The function is passed in an address of the <null> terminated
                           175     ;              string, which is stored in an array called numString which is at
                           176     ;              most MAX_DIGIT bytes long. There is a counter that signifies
                           177     ;              which ASCII character is currently being translated into the
                           178     ;              7-segment code. The loop first checks if the counter has reached
                           179     ;              MAX_DIGIT. If so, the loop terminates and the function returns,
                           180     ;              since the display board will not be able to display any more
                           181     ;              characters. If not, the loop retreives the current ASCII
                           182     ;              character to translate. If the ASCII character is the <null>
                           183     ;              terminator, the end of the string is reached, and the loop
                           184     ;              exits. If not, the function uses XLAT to look in the
                           185     ;              7-segment lookup table and figure out the 7-segment code
                           186     ;              representation on the display for that character, then stores it
                           187     ;              into the muxBuffer. If all the ASCII characters are translated
                           188     ;              without truncation, the function checks if there are any unused
                           189     ;              spaces after the end of the string displayed. If so, these
                           190     ;              unused spaces are set to blanks (0) using another loop to
                           191     ;              MAX_DIGIT.
                           192     ;
                           193     ; Arguments:        str (SI)  - the address of <null> terminated string to
                           194     ;                               output to the LED display
                           195     ; Return Value:     None.
                           196     ; Local Variables:  None.
                           197     ; Shared Variables: muxBuffer - contains the 7-segment codes for all the ASCII
                           198     ;                               characters to display.
                           199     ; Global Variables: None.
                           200     ;
                           201     ; Input: None.
                           202     ; Output: Digits on the LED display board
                           203     ;
                           204     ; Error Handling: None.
                           205     ;
                           206     ; Limitations: Can display at most MAX_DIGIT.
                           207     ;
                           208     ; Algorithms: None.
                           209     ; Data Structures: muxBuffer (an array that stores every 7-segment code).
                           210     ;
                           211     ; Registers Changed: AX, BX, CX, DX
                           212     ;
                           213     ; Author: Nancy Cao
                           214     ; Revision History:
                           215     ;     10/27/15  Nancy Cao        initial comments and pseudocode
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  20:10:38  01/07/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           216     ;     10/31/15  Nancy Cao        initial revision
                           217     ;     11/01/15  Nancy Cao        updated comments
                           218     
0020                       219     Display      PROC        NEAR
                           220                  PUBLIC      Display             
                           221     
0020 56                    222         PUSH SI                  ; save current value stored in SI to stack
0021 53                    223         PUSH BX
                           224                  
0022                       225     InitializeCounter:           ; sets char count to 0 before looping ASCII chars
0022 BF0000                226             MOV DI, 0                ; # of iterations through the ASCII string
                           227         ;JMP CheckCharDisplayed  ; proceed to translate characters
                           228             
0025                       229     CheckCharDisplayed:          ; check if display is completely used by chars
0025 83FF08                230             CMP DI, MAX_DIGIT        ; board can display at most MAX_DIGIT chars
0028 7417                  231             JZ  FinishConverting     ; if iterated more than MAX_DIGIT chars then done
002A EB0190                232             JMP StringToSegcode      ; otherwise convert current string char to segcode
                           233     
002D                       234     StringToSegcode:             ; ASCII char to seg code from lookup table
002D 268A04                235             MOV AL, ES:[SI]          ; the current ASCII character to translate to code
0030 3C00                  236         CMP AL, ASCII_NULL       ; check if we reached the end of the string
0032 740D                  237             JZ  FinishConverting     ; if yes we are done converting the ASCII string
                           238         ;JNZ ContinueConverting  ; if not continue converting
                           239         
0034                       240     ContinueConverting:
0034 BB0000         E      241         MOV BX, OFFSET(ASCIISegTable)  ; import 7-seg table for converion using xlat
0037 2ED7                  242             XLAT CS:ASCIISegTable    ; translate current character to 7-seg code
0039 88850800       R      243             MOV muxBuffer[DI], AL    ; store 7-seg code into buffer
003D 47                    244             INC DI                   ; increase counter to next byte in buffer for store
003E 46                    245         INC SI                   ; the next ASCII character to translate to code
003F EBE4                  246             JMP CheckCharDisplayed   ; loop and do the same with next character
                           247             
0041                       248     FinishConverting:            ; done loading buffer
0041 83FF08                249         CMP DI, MAX_DIGIT        ; check if translated string fills up board
0044 7C03                  250         JL  FillZero             ; if not, clear the rest from previous displays
0046 EB0A90                251         JMP Done                 ; otherwise, conversion is done
                           252     
0049                       253     FillZero:                    ; fill unused digits as blanks
0049 C68508000090   R      254         MOV muxBuffer[DI], 0     ; fill current digit as a blank display
004F 47                    255         INC DI                   ; increment to the next digit to output as blank
0050 EBEF                  256         JMP FinishConverting     ; go back to check if rest of board is cleared
                           257     
0052                       258     Done:
0052 5B                    259         POP BX
0053 5E                    260         POP SI                   ; restore previous register value
0054 C3                    261             RET                      ; return
                           262     
                           263     Display       ENDP
                           264     
                           265     ; DisplayNum
                           266     ; 
                           267     ; Description: This function takes in a 16-bit signed value, converts it to
                           268     ;              a decimal in ASCII form with a <null> terminated string which is
                           269     ;              at most 5 characters in addition to the + or - sign, and
                           270     ;              passes the string into the Display function defined above.
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  20:10:38  01/07/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           271     ;              The conversion references the Dec2String function found in
                           272     ;              converts.asm. The string is left justified.
                           273     ;
                           274     ; Operation:   This function passes in the 16-bit signed value stored in AX,
                           275     ;              and calls Dec2String, which is defined in converts.asm.
                           276     ;              Dec2String converts the 16-bit signed value into a decimal,
                           277     ;              and returns it as a sign and at most 5 character ASCII digits,
                           278     ;              ending with a <null> terminator. This result is then passed into
                           279     ;              the Display function defined above, which will display the ASCII
                           280     ;              digits onto the LED display.
                           281     ;
                           282     ; Arguments:         n (AX) - the 16-bit signed value that is to be output in
                           283     ;                             decimal form
                           284     ; Return Value:      None.
                           285     ; Local Variables:   a (BX) - address where the ASCII form of the decimal
                           286     ;                             with the null terminator is stored
                           287     ; Shared Variables:  numString - contains the ASCII characters to display
                           288     ; Global Variables:  None.
                           289     ;
                           290     ; Input:  None.
                           291     ; Output: The decimal value of n on the LED display board.
                           292     ;
                           293     ; Error Handling: None.
                           294     ;
                           295     ; Limitations: Can only display at most 5 digits and the sign value on the
                           296     ;              board due to limitations of Dec2String.
                           297     ;
                           298     ; Algorithms: None.
                           299     ; Data Structures: None.
                           300     ;
                           301     ; Registers Changed: SI
                           302     ;
                           303     ; Author: Nancy Cao
                           304     ; Revision History:
                           305     ;     10/27/15  Nancy Cao        initial comments and pseudocode
                           306     ;     10/31/15  Nancy Cao        initial revision
                           307     
0055                       308     DisplayNum   PROC        NEAR
                           309                  PUBLIC      DisplayNum
                           310     
0055 8D360000       R      311     LEA  SI, numString          ; load the address for Dec2String arguments
                           312     
0059 1E                    313     PUSH DS                     ; save current DS memory
005A 07                    314     POP  ES                     ; switch to ES memory to pass value to display
                           315     
005B 06                    316     PUSH ES                     ; save register values on stack before conversion
005C 56                    317     PUSH SI
005D E80000         E      318     CALL Dec2String             ; convert 16-bit value (n) to decimal ASCII chars
0060 5E                    319     POP  SI                     ; restore register values from stack
0061 07                    320     POP  ES
                           321     
0062 E8BBFF                322     CALL Display                ; display ASCII chars; function works on ES:SI
                           323     
0065 C3                    324     RET
                           325     
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  20:10:38  01/07/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           326     DisplayNum       ENDP
                           327     
                           328     ; DisplayHex
                           329     ; 
                           330     ; Description: This function takes in a 16-bit unsigned value, converts it to
                           331     ;              a hexadecimal in ASCII form with a <null> terminated string which
                           332     ;              is at most 5 characters long, and passes the string into the
                           333     ;              Display function defined above. The conversion references the
                           334     ;              Hex2String function found in converts.asm. It is left justified.
                           335     ;
                           336     ; Operation:   This function passes in the 16-bit unsigned value stored in AX,
                           337     ;              and calls Hex2String, which is defined in converts.asm.
                           338     ;              Hex2String converts the 16-bit unsigned value to a hexadecimal,
                           339     ;              and returns it as at most 4 character ASCII digits,
                           340     ;              ending with a <null> terminator. This result is then passed into
                           341     ;              the Display function defined above, which will display the ASCII
                           342     ;              digits onto the LED display.
                           343     ;
                           344     ; Arguments:         n (AX)   - the 16-bit unsigned value that is to be output
                           345     ;                               in hexadecimal form
                           346     ; Return Value:      None.
                           347     ; Local Variables:   a        - address where the ASCII form of hexaadecimal
                           348     ;                               with null terminator is stored
                           349     ; Shared Variables:  numString - contains the ASCII characters to display
                           350     ; Global Variables:  time - the number of milliseconds that have passed
                           351     ;
                           352     ; Input:  None.
                           353     ; Output: The hexadecimal value of n on the LED display board.
                           354     ;
                           355     ; Error Handling: None.
                           356     ;
                           357     ; Limitations: Can only display at most 4 digits on board due to limitations
                           358     ;              of Hex2String.
                           359     ;
                           360     ; Algorithms: None.
                           361     ; Data Structures: None.
                           362     ;
                           363     ; Registers Changed: SI
                           364     ;       
                           365     ; Author: Nancy Cao
                           366     ; Revision History:
                           367     ;     10/27/15  Nancy Cao        initial comments and pseudocode
                           368     ;     10/31/15  Nancy Cao        initial code
                           369     ;
                           370     
0066                       371     DisplayHex   PROC        NEAR
                           372                  PUBLIC      DisplayHex
                           373     
0066 8D360000       R      374     LEA  SI, numString         ; load the address for Hex2String arguments
                           375     
006A 1E                    376     PUSH DS                     ; save current DS memory
006B 07                    377     POP  ES                     ; switch to ES memory to pass value to display
                           378     
006C 06                    379     PUSH ES                     ; save register in stack before conversion
006D 56                    380     PUSH SI
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  20:10:38  01/07/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

006E E80000         E      381     CALL Hex2String             ; convert 16-bit value (n) to decimal ASCII chars
0071 5E                    382     POP  SI                     ; return register from stack
0072 07                    383     POP  ES
                           384     
0073 E8AAFF                385     CALL Display                ; display ASCII chars; function works on ES:SI
                           386     
0076 C3                    387     RET
                           388     
                           389     DisplayHex       ENDP
                           390     
                           391     
                           392     ; Multiplex
                           393     ; 
                           394     ; Description: This function determines what is the next digit to display on
                           395     ;              the board. It reads from a shared buffer that contains
                           396     ;              the 7-segment codes for the current ASCII string to be displayed.
                           397     ;
                           398     ; Operation:   The function increments the current digit that is being displayed
                           399     ;              The function then accesses the digit at that particular
                           400     ;              index in the buffer and retrieves the 7-segment value. The
                           401     ;              function goes through every byte in the 7-segment value and
                           402     ;              outputs it to the board.
                           403     ;
                           404     ; Arguments:       None.
                           405     ; Return Value:    None.
                           406     ; Local Variables: None.
                           407     ; Shared Variables: muxBuffer      - contains the 7-segment codes for all the ASCII
                           408     ;                                    characters to display.
                           409     ;                   MAX_DIGIT      - the max number of digits that can be
                           410     ;                                    displayed on the board
                           411     ;                   CURRENT_DIGIT  - the current digit to display
                           412     ; Global Variables: None.
                           413     ;
                           414     ; Input: None.
                           415     ; Output: A digit on the LED display board.
                           416     ;
                           417     ; Error Handling: None.
                           418     ;
                           419     ; Limitations: Can only display 1 digit at a time.
                           420     ;
                           421     ; Algorithms: None.
                           422     ; Data Structures: Buffer (an array).
                           423     ;
                           424     ; Registers Changed: BX, AX, DX.
                           425     ;
                           426     ; Author: Nancy Cao
                           427     ; Revision History:
                           428     ;     10/27/15  Nancy Cao        initial comments and pseudocode
                           429     ;     11/01/15  Nancy Cao        initial revision
                           430     ;     11/03/15  Nancy Cao        incremented current digit properly
                           431     ;
                           432     
0077                       433     Multiplex    PROC        NEAR
                           434                  PUBLIC      Multiplex
                           435           
8086/87/88/186 MACRO ASSEMBLER    DISPLAY                                                  20:10:38  01/07/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

0077 FF061000       R      436     INC  CURRENT_DIGIT                 ; move to the next digit to display
007B 812610000700   R      437     AND  CURRENT_DIGIT, MAX_DIGIT - 1  ; wrap around index in case out of bounds
0081 8B1E1000       R      438     MOV   BX, CURRENT_DIGIT            ; current digit displayed
0085 8A870800       R      439     MOV   AL, muxBuffer[BX]            ; retrieve next digit
0089 8BD3                  440     MOV   DX, BX                       ; the current digit
008B EE                    441     OUT   DX, AL                       ; output digit on board
008C C3                    442     RET
                           443     
                           444     Multiplex       ENDP
                           445             
----                       446     CODE ENDS
                           447     
                           448     ;the data segment
                           449     
----                       450     DATA    SEGMENT PUBLIC  'DATA'
                           451     
0000 (8                    452     numString       DB MAX_DIGIT DUP (?)   ; holds Max_Digit ASCII vals to display
     ??
     )
0008 (8                    453     muxBuffer       DB MAX_DIGIT DUP (?)   ; holds Max_Digit 7-seg codes to display
     ??
     )
0010 ????                  454     CURRENT_DIGIT   DW     ?               ; the current digit to display from mux
                           455     
                           456     
----                       457     DATA    ENDS
                           458     
                           459     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
