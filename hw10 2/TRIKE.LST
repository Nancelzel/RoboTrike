8086/87/88/186 MACRO ASSEMBLER    TRIKE                                                    20:25:01  01/07/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE TRIKE
OBJECT MODULE PLACED IN TRIKE.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE TRIKE.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1     NAME    TRIKE
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    Trike                                   ;
                             6     ;                       RoboTrike Trike Board Functions                      ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; Description:       This program includes the functions used by the remote
                            12     ;                    board of the RoboTrike. The public functions included are:
                            13     ;                        InitTrike          - initializes the remote board,
                            14     ;                                             including the chips, illegal,
                            15     ;                                             handlers, keypad, the display
                            16     ;                                             board, the serial, the timer 0
                            17     ;                                             which is used for the
                            18     ;                                             motors, and int 2, which is
                            19     ;                                             used to handle different
                            20     ;                                             interrupts for the serial. The
                            21     ;                                             event queue
                            22     ;                                             that stores events to be
                            23     ;                                             processed by the motor is also
                            24     ;                                             initialized. (public)
                            25     ;                        SetCriticalError - sets the critical error flag (public)
                            26     ;                  The private functions included are:
                            27     ;                        SerialPutString - puts a command through the serial,
                            28     ;                                          one character at a time
                            29     ;                        KeyHandler     - handles any key presses; displays the
                            30     ;                                         function of the pressed key, then
                            31     ;                                         sends the command (private)
                            32     ;                        DataHandler - reads data received from the serial and
                            33     ;                                      displays it onto the display board (private)
                            34     ;                        ErrorHandler   - determines what error to display on
                            35     ;                                         the display board (private)
                            36     ;                        DoNothing - does nothing (private)
                            37     ;                 Tables included are:
                            38     ;                        JumpTable - a table of addresses of handler functions
                            39     ;                        ErrorTable - a table of possible errors to display on
                            40     ;                                     the display board
                            41     ;                        
                            42     ;
                            43     ; Revision History:
                            44     ;     12/01/15  Nancy Cao         initial comments and pseudocode
                            45     ;     12/25/15  Nancy Cao         initial code and updated comments
                            46     ;     12/28/15  Nancy Cao         updated comments
                            47     
                            48     ; local include files
                            49 +1  $INCLUDE(TRIKE.INC)          ; remote constants used for the remote main
                      =1    50     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8086/87/88/186 MACRO ASSEMBLER    TRIKE                                                    20:25:01  01/07/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     ;                                                                            ;
                      =1    52     ;                                    TRIKE.INC                               ;
                      =1    53     ;                                Trike Definitions                           ;
                      =1    54     ;                                  Include File                              ;
                      =1    55     ;                                                                            ;
                      =1    56     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    57     
                      =1    58     ; This file contains the definitions for the trike functions.
                      =1    59     ;
                      =1    60     ; Revision History:
                      =1    61     ;     12/28/15  Nancy Cao      initial code and comment
                      =1    62     
                      =1    63     ; definitions
  0000                =1    64     NO_CRITICAL_ERROR  EQU 0
  0000                =1    65     NO_ERROR           EQU 0    ; flag for no errors
  0001                =1    66     CRITICAL_ERROR     EQU 1
  0000                =1    67     ASCII_NULL         EQU 0    ; ASCII value of null
  000D                =1    68     ASCII_RET          EQU 13   ; ASCII value of '<RETURN>'
  0008                =1    69     DISPLAY_SIZE       EQU 8    ; the max number of characters that can be displayed
  0003                =1    70     DISPLAY_LENGTH     EQU 3    ; the power of 2 of the length of the string displayed; 2
                                   ^3 = 8-bit string
                            71 +1  $INCLUDE(QUEUE.INC)           ; queue constants used for the queue
                      =1    72     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    73     ;                                                                            ;
                      =1    74     ;                                   QUEUE.INC                                ;
                      =1    75     ;                               Queue Definitions                            ;
                      =1    76     ;                                  Include File                              ;
                      =1    77     ;                                                                            ;
                      =1    78     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    79     
                      =1    80     ; This file contains the definitions for the queue functions.
                      =1    81     ;
                      =1    82     ; Revision History:
                      =1    83     ;     10/24/15  Nancy Cao      initial revision
                      =1    84     
                      =1    85     ; definitions
  00FF                =1    86     LENGTH_TEST   EQU 255               ; length of the queue
                      =1    87     
                      =1    88     ; Queue structure
                      =1    89     
----                  =1    90     QUEUE         STRUC
0000                  =1    91         headPtr   DB ?                  ; index of head/first element of queue
0001                  =1    92             tailPtr   DB ?                  ; index of tail/last element of queue
0002                  =1    93             len       DW ?                  ; length of queue in bytes
0004                  =1    94             s         DB ?                  ; size of elements in queue (1 or 2 bytes)
0005                  =1    95             array1Ds  DB 256 DUP (?)        ; 1D array designed to hold max 256 bytes
----                  =1    96     QUEUE         ENDS
                            97     
                            98     EXTRN InitCS:NEAR             ; used to initialize chip select
                            99     EXTRN ClrIRQVectors:NEAR      ; used to clear interrupt vector table
                           100     EXTRN InitSerial:NEAR         ; used to initialize serial
                           101     EXTRN InitEventQueue:NEAR     ; used to initialize the event queue
                           102     EXTRN InitTimer0:NEAR         ; used to initialize timer 0
                           103     EXTRN InstallTimer0Handler:NEAR  ; installs timer 0 handler
                           104     EXTRN InitInt2:NEAR           ; used to initialize interrupt 2
8086/87/88/186 MACRO ASSEMBLER    TRIKE                                                    20:25:01  01/07/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                           105     EXTRN InstallInt2Handler:NEAR ; installs interrupt 2 handler
                           106     EXTRN InitPP:NEAR             ; initializes the parallel port
                           107     EXTRN InitMotor:NEAR          ; initializes the motor
                           108     EXTRN EnqueueEvent:NEAR       ; enqueues an event to the event queue
                           109     EXTRN DequeueEvent:NEAR       ; dequeues an event from the event queue
                           110     EXTRN SerialPutChar:NEAR      ; puts a character through the serial
                           111     
                           112     EXTRN InitSerialChar:NEAR     ; initializes the parser
                           113     EXTRN ParseSerialChar:NEAR    ; parses a command string into characters and
                           114                                   ; calls appropriate command based on command
                           115     
                           116     
                           117     CGROUP  GROUP   CODE
                           118     DGROUP  GROUP   DATA
                           119     
----                       120     CODE    SEGMENT PUBLIC 'CODE'
                           121     
                           122     
                           123             ASSUME  CS:CGROUP, DS:DGROUP
                           124     
                           125     ; Main loop
                           126     ; 
                           127     ; Description: The main loop initializes the trike. The chips, illegal
                           128     ;              handlers, keypad, display board, and the serial are all
                           129     ;              initialized. Timer 0 and its handler is also initialized and
                           130     ;              installed, which is used for the motors. Int 2 and its handler is
                           131     ;              also initialized and installed. The parallel port is initialized.
                           132     ;              The motors and the parser is initialized. The event queue, which
                           133     ;              stores events that the remote board should do, is initialized.
                           134     ;              The critical flag is set to no critical error, and then dequeues
                           135     ;              an event from the event queue to determine what type of event is
                           136     ;              next to be handled.
                           137     ;
                           138     ; Operation:   This function first initializes the chip select, and then clears
                           139     ;              the interrupt vector table. Timer 0 is then initialized, and its
                           140     ;              handler is installed. Int 2 is initialized, and its handler is
                           141     ;              installed. Then both keypad and display are initialized. The
                           142     ;              parallel port, motors, parser, and serial are also initialized,
                           143     ;              and the event queue is initialized. The critical flag is set to
                           144     ;              NO_CRITICAL_ERROR, and then allow interrupts. The critical flag
                           145     ;              is first set to NO_CRITICAL_ERROR, and then the function loops
                           146     ;              and attempts to dequeue the event queue over and over again. If
                           147     ;              at any time the critical flag is set, the remote is
                           148     ;              re-initialized before dequeuing events again. Once an event value
                           149     ;              is dequeued, it is converted into a word index to be used to look
                           150     ;              up the corresponding handler in the JumpTable (key handler, data
                           151     ;              handler, or error handler).
                           152     ;
                           153     ; Arguments:        None.
                           154     ; Return Value:     None.
                           155     ; Local Variables:  None.
                           156     ; Shared Variables: criticalFlag - the critical error flag (DS, R/W)
                           157     ; Global Variables: None.
                           158     ;
                           159     ; Input: None.
8086/87/88/186 MACRO ASSEMBLER    TRIKE                                                    20:25:01  01/07/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           160     ; Output: None.
                           161     ;
                           162     ; Error Handling: None.
                           163     ;
                           164     ; Limitations: None.
                           165     ;
                           166     ; Algorithms: None.
                           167     ; Data Structures: None.
                           168     ;
                           169     ; Registers Changed: BX
                           170     ;
                           171     ;
                           172     ; Author: Nancy Cao
                           173     ; Revision History:
                           174     ;     12/01/15  Nancy Cao        initial comments and pseudocode
                           175     ;     12/25/15  Nancy Cao        initial code and comments
                           176     ;     12/28/15  Nancy Cao        updated comments
                           177     
0000                       178     START:  
                           179     
0000                       180     MAIN:
0000 B8----         R      181             MOV     AX, DGROUP              ; initialize the stack pointer
0003 8ED0                  182             MOV     SS, AX
0005 BCE00190       R      183             MOV     SP, OFFSET(DGROUP:TopOfStack)
                           184     
0009 B8----         R      185             MOV     AX, DGROUP              ; initialize the data segment
000C 8ED8                  186             MOV     DS, AX
                           187     
                           188     
000E                       189     ResetRemote:
000E E80000         E      190             CALL    InitCS                  ; initialize the 80188 chip selects
                           191                                             ; assumes LCS and UCS already setup
                           192            
0011 E80000         E      193             CALL    ClrIRQVectors           ; clear interrupt vector table
                           194             
0014 E80000         E      195             CALL    InitTimer0              ; initialize timer 0
                           196             
0017 E80000         E      197             CALL    InstallTimer0Handler    ; install the timer 0 handler
                           198             
001A E80000         E      199             CALL    InitInt2                ; initialize interrupt 0
                           200             
001D E80000         E      201             CALL    InstallInt2Handler      ; install the interrupt 0 handler
                           202             
0020 E80000         E      203             CALL    InitPP                  ; initialize the parallel port
                           204     
0023 E80000         E      205             CALL    InitMotor               ; initialize the motors
                           206             
0026 E80000         E      207             CALL    InitSerialChar          ; initialize the parser
                           208             
0029 E80000         E      209             CALL    InitSerial              ; initialize the serial
                           210             
002C E80000         E      211             CALL    InitEventQueue          ; initialize the event queue
                           212             
002F C60600000090   R      213             MOV     criticalFlag, NO_CRITICAL_ERROR ; reset critical error flag
                           214                                             
8086/87/88/186 MACRO ASSEMBLER    TRIKE                                                    20:25:01  01/07/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

0035 FB                    215             STI                             ; and finally allow interrupts.
                           216             
0036                       217     DequeueEventValue:
0036 803E000001     R      218             CMP criticalFlag, CRITICAL_ERROR ; check if there is a critical error
003B 74D1                  219             JE  ResetRemote                  ; if so, re-initialize everything
                           220             
003D E80000         E      221             CALL DequeueEvent                ; otherwise dequeue an event
                           222             
0040 74F4                  223             JZ DequeueEventValue             ; if nothing was dequeued try again
                           224     
0042                       225     Break:        
0042 8ADC                  226             MOV BL, AH                       ; move event value into lower bit of BX
                           227                                              ; index
0044 B700                  228             MOV BH, 0                        ; clear higher bit of BX
0046 D1E3                  229             SHL BX, 1                        ; convert byte index to word index,
                           230                                              ; since JumpTable is word type
                           231             
0048 2EFF979100     R      232             CALL CS:JumpTable[BX]            ; call function corresponding to event
                           233             
004D EBE7                  234             JMP DequeueEventValue            ; keep dequeuing event values
                           235             
004F F4                    236             HLT                              ; never executed (hopefully)
                           237      
                           238     ; SetCriticalError
                           239     ;
                           240     ; Description:       This function sets the critical error flag.
                           241     ;
                           242     ; Operation:         The critical error flag is set.
                           243     ;
                           244     ; Arguments:         None.
                           245     ; Return Value:      None.
                           246     ;
                           247     ; Local Variables:   None.
                           248     ; Shared Variables:  criticalFlag - the critical error flag (DS, W)
                           249     ; Global Variables:  None.
                           250     ;
                           251     ; Input:             None.
                           252     ; Output:            None.
                           253     ;
                           254     ; Error Handling:    None.
                           255     ;
                           256     ; Algorithms:        None.
                           257     ; Data Structures:   Queue.
                           258     ;
                           259     ; Registers Changed: None.
                           260     ;
                           261     ; Author:            Nancy Cao
                           262     ; Revision History:
                           263     ;     12/26/15  Nancy Cao   initial code and comments
                           264     
0050                       265     SetCriticalError     PROC    NEAR
                           266                          PUBLIC  SetCriticalError
                           267     
0050 C60600000190   R      268         MOV     criticalFlag, CRITICAL_ERROR  
0056 C3                    269         RET
8086/87/88/186 MACRO ASSEMBLER    TRIKE                                                    20:25:01  01/07/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           270           
                           271     SetCriticalError     ENDP
                           272     
                           273     ; SerialPutString
                           274     ;
                           275     ; Description:       This function passes to the serial the string stored at the
                           276     ;                    argument passed in SI one character at a time using
                           277     ;                    SerialPutChar. ASCII_NULL is the signal that the entire
                           278     ;                    command has been sent through.
                           279     ;
                           280     ; Operation:         This function starts by getting the character stored at
                           281     ;                    SI, which is the argument passed in. If this character is
                           282     ;                    the null terminal character, the entire string has been
                           283     ;                    sent and the function can end. Otherwise, the current
                           284     ;                    address is saved as the character is sent through the
                           285     ;                    serial to the remote via SerialPutChar. The address is
                           286     ;                    retrieved at the end and incremented to get the next
                           287     ;                    character to be put through the serial.
                           288     ;
                           289     ; Arguments:         SI - the address of where the string to pass through the
                           290     ;                         serial starts
                           291     ; Return Value:      None.
                           292     ;
                           293     ; Local Variables:   None.
                           294     ; Shared Variables:  None.
                           295     ; Global Variables:  None.
                           296     ;
                           297     ; Input:             None.
                           298     ; Output:            None.
                           299     ;
                           300     ; Error Handling:    None.
                           301     ;
                           302     ; Algorithms:        None.
                           303     ; Data Structures:   None.
                           304     ;
                           305     ; Registers Changed: AX, SI
                           306     ;
                           307     ; Author:            Nancy Cao
                           308     ; Revision History:
                           309     ;     12/26/15  Nancy Cao   initial code and comments
                           310     ;     12/28/15  Nancy Cao   updated comments
                           311     
0057                       312     SerialPutString     PROC    NEAR
                           313     
0057                       314     CheckEndString:
0057 268A04                315         MOV     AL, ES:[SI]             ; next character to put to serial to display
005A 3C00                  316         CMP     AL, ASCII_NULL          ; check if character is the end of string
005C 7408                  317         JE      PutStringFinish         ; if yes, we are done
                           318         ;JNE    SendChar                ; otherwise continue sending characters to
                           319                                         ; serial
                           320     
005E                       321     SendChar:                           ; send the character over the serial
005E 56                    322         PUSH    SI                      ; save current index of character on stack
005F E80000         E      323         CALL    SerialPutChar           ; put the character over the serial
0062 5E                    324         POP     SI                      ; retrieve saved index of character from stack   
8086/87/88/186 MACRO ASSEMBLER    TRIKE                                                    20:25:01  01/07/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                                    
0063 46                    325         INC     SI                      ; increment index to next character
0064 EBF1                  326         JMP     CheckEndString          ; check if this character is the end char
                           327     
0066                       328     PutStringFinish:
0066 C3                    329         RET
                           330           
                           331     SerialPutString     ENDP
                           332     
                           333     ; DataHander
                           334     ;
                           335     ; Description:       This function takes calls ParseSerialChar to see if the
                           336     ;                    character event value in AL can be parsed. If it is parsed
                           337     ;                    successfully, nothing should be done. Otherwise, the
                           338     ;                    corresponding error is looked up from a table and sent over
                           339     ;                    the serial.
                           340     ;
                           341     ; Operation:         This function first calls ParseSerial to parse the
                           342     ;                    character from the serial. If no errors occur, the function
                           343     ;                    is done. Otherwise, AX should have the error index, which
                           344     ;                    is used to look up the corresponding error in the
                           345     ;                    ErrorTable. The address of ErrorTable is stored
                           346     ;                    as an argument, the index is shifted appropriately to take
                           347     ;                    account of the size of the error to send. The address
                           348     ;                    and the index value is added to get the address of the
                           349     ;                    error to send. The function switches from CS to ES to
                           350     ;                    write into ES instead, before calling SerialPutString.
                           351     ;
                           352     ; Arguments:         AL - the event value to be parsed
                           353     ; Return Value:      None.
                           354     ;
                           355     ; Local Variables:   None.
                           356     ; Shared Variables:  errorStr - the error string to send to the remote (DS, R/W)
                           357     ; Global Variables:  None.
                           358     ;
                           359     ; Input:             None. 
                           360     ; Output:            None.
                           361     ;
                           362     ; Error Handling:    None.
                           363     ;
                           364     ; Algorithms:        None.
                           365     ; Data Structures:   Queue.
                           366     ;
                           367     ; Registers Changed: None.
                           368     ;
                           369     ; Author:            Nancy Cao
                           370     ; Revision History:
                           371     ;     12/01/15  Nancy Cao   initial comments and pseudocode
                           372     ;     12/26/15  Nancy Cao   initial code and comments
                           373     ;     12/28/15  Nancy Cao   updated comments
                           374     
0067                       375     DataHandler     PROC    NEAR
                           376     
0067                       377     DisplayDataMessage:
0067 E80000         E      378             CALL    ParseSerialChar         ; parses the command from serial; if no
8086/87/88/186 MACRO ASSEMBLER    TRIKE                                                    20:25:01  01/07/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           379                                             ; errors occurred the right function
                           380                                             ; should have been called to handle the
                           381                                             ; command                     
006A 3D0000                382             CMP     AX, NO_ERROR            ; check there were no errors
006D 7415                  383             JE      FinishDataHandler       ; if no errors we are done
                           384             ;JNE    SendError               ; otherwise need to send the appropriate
                           385                                             ; error
                           386             
006F                       387     SendError:
006F 8D369900       R      388             LEA  SI, CS:ErrorTable           ; get address to beginning of ErrorTable
0073 8AD8                  389             MOV  BL, AL                      ; make error value the index for lookup
0075 B700                  390             MOV  BH, 0                       ; clear higher bit of BX
0077 C1E303                391             SHL  BX, DISPLAY_LENGTH          ; multiply index by length of string (8-bit 
                                   so shift by 3 since 2^3 = 8)
007A 03F3                  392             ADD  SI, BX                      ; get the address of appropriate display
                           393                                              ; and store it as the address argument
                           394                 
007C 0E                    395             PUSH CS                          ; move to ES:SI
007D 07                    396             POP  ES      
007E E8D6FF                397             CALL SerialPutString             ; send error to serial to be displayed
0081 EB0190                398             JMP FinishDataHandler
                           399             
0084                       400     FinishDataHandler:
0084 C3                    401             RET                             ; once done handling, return
                           402           
                           403     DataHandler     ENDP
                           404     
                           405     ; ErrorHander
                           406     ;
                           407     ; Description:       This function handles error events. If there is an error,
                           408     ;                    an error message is passed to the seiral via
                           409     ;                    SerialPutString.
                           410     ;
                           411     ; Operation:         The address of errorStr is stored as an argument for
                           412     ;                    SerialPutString. Switch to ES:SI before SerialPutString
                           413     ;                    is called, which will send the error over the serial to the
                           414     ;                    remote.
                           415     ;
                           416     ; Arguments:         None.
                           417     ; Return Value:      None.
                           418     ;
                           419     ; Local Variables:   None.
                           420     ; Shared Variables:  errorStr - the error message to display (DS, R/W)
                           421     ; Global Variables:  None.
                           422     ;
                           423     ; Input:             None.
                           424     ; Output:            None.
                           425     ;
                           426     ; Error Handling:    None.
                           427     ;
                           428     ; Algorithms:        None.
                           429     ; Data Structures:   None.
                           430     ;
                           431     ; Registers Changed: SI
                           432     ;
8086/87/88/186 MACRO ASSEMBLER    TRIKE                                                    20:25:01  01/07/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           433     ; Author:            Nancy Cao
                           434     ; Revision History:
                           435     ;     12/01/15  Nancy Cao   initial comments and pseudocode
                           436     ;     12/26/15  Nancy Cao   updated code and comments
                           437     ;     12/28/15  Nancy Cao   updated comments
                           438     
0085                       439     ErrorHandler     PROC    NEAR
                           440     
0085                       441     DisplayErrorMessage:
0085 BEB90090       R      442             MOV  SI, OFFSET(errorStr)        ; get address of string to display
0089 0E                    443             PUSH CS                          ; move to ES:SI
008A 07                    444             POP  ES
008B E8C9FF                445             CALL SerialPutString             ; send error over the serial
008E C3                    446             RET
                           447             
                           448     ErrorHandler     ENDP
                           449     
                           450     ; DoNothing
                           451     ;
                           452     ; Description:       This function does nothing.
                           453     ;
                           454     ; Operation:         This function does nothing.
                           455     ;
                           456     ; Arguments:         None.
                           457     ; Return Value:      None.
                           458     ;
                           459     ; Local Variables:   None.
                           460     ; Shared Variables:  None.
                           461     ; Global Variables:  None.
                           462     ;
                           463     ; Input:             None.
                           464     ; Output:            None.
                           465     ;
                           466     ; Error Handling:    None.
                           467     ;
                           468     ; Algorithms:        None.
                           469     ; Data Structures:   None.
                           470     ;
                           471     ; Registers Changed: None.
                           472     ;
                           473     ; Author:            Nancy Cao
                           474     ; Revision History:
                           475     ;     12/21/15  Nancy Cao   initial code and comments
                           476     
008F                       477     DoNothing      PROC        NEAR
                           478     
008F 90                    479         NOP
0090 C3                    480         RET
                           481     
                           482     DoNothing     ENDP
                           483     
                           484     ; A table of addresses of handler functions
0091                       485     JumpTable   LABEL   WORD
                           486                 PUBLIC  JumpTable
                           487     
8086/87/88/186 MACRO ASSEMBLER    TRIKE                                                    20:25:01  01/07/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

0091 8F00           R      488         DW        OFFSET(DoNothing)      ; do nothing
0093 8F00           R      489         DW        OFFSET(DoNothing)      ; do nothing (no key presses)
0095 6700           R      490         DW        OFFSET(DataHandler)    ; handles commands to display
0097 8500           R      491         DW        OFFSET(ErrorHandler)   ; handles errors
                           492     
                           493     ; A table of error messages to display onto the display board
0099                       494     ErrorTable LABEL BYTE
                           495                PUBLIC ErrorTable
                           496     
0099 4E6F20657272          497         DB        'No err', ASCII_RET, ASCII_NULL             ; no errors
009F 0D
00A0 00
00A1 4F766572666C          498         DB        'Overfl', ASCII_RET, ASCII_NULL             ; overflow error       
00A7 0D
00A8 00
00A9 426164617267          499         DB        'Badarg', ASCII_RET, ASCII_NULL             ; bad argument
00AF 0D
00B0 00
00B1 5472616E7345          500         DB        'TransE', ASCII_RET, ASCII_NULL             ; transition error
00B7 0D
00B8 00
                           501              
00B9 4572726F7273          502     errorStr DB   'Errors', ASCII_RET, ASCII_NULL ; error
00BF 0D
00C0 00
00C1 4E6F20657272          503     noError DB    'No err', ASCII_RET, ASCII_NULL ; no error
00C7 0D
00C8 00
                           504     
----                       505     CODE ENDS
                           506     
                           507     
                           508     ;the data segment
----                       509     DATA    SEGMENT PUBLIC  'DATA'
                           510     
0000 00                    511     criticalFlag DB NO_CRITICAL_ERROR      ; the flag that indicates if a critical
                           512                                            ; error has occurred
                           513     
----                       514     DATA    ENDS
                           515     
                           516     
                           517     ;the stack
                           518     
----                       519     STACK           SEGMENT STACK  'STACK'
                           520     
0000 (80                   521                     DB      80 DUP ('Stack ')       ;240 words
     537461636B20
     )
                           522     
01E0                       523     TopOfStack      LABEL   WORD
                           524     
----                       525     STACK           ENDS
                           526     
                           527     
                           528     
8086/87/88/186 MACRO ASSEMBLER    TRIKE                                                    20:25:01  01/07/;6  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           529             END     START

ASSEMBLY COMPLETE, NO ERRORS FOUND
